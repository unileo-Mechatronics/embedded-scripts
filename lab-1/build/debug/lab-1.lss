
build/debug/lab-1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002720  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080029ec  080029ec  000039ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a28  08002a28  00004014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002a28  08002a28  00003a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a30  08002a30  00004014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a30  08002a30  00003a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002a34  08002a34  00003a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08002a38  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000014  08002a4c  00004014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08002a4c  000040e0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00004014  2**0
                  CONTENTS, READONLY
 12 .comment      00000039  00000000  00000000  00004042  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011ce4  00000000  00000000  0000407b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f1d  00000000  00000000  00015d5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a60  00000000  00000000  00017c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000082f  00000000  00000000  000186e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c901  00000000  00000000  00018f0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00004502  00000000  00000000  00025810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  0000192c  00000000  00000000  00029d14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 00006ee2  00000000  00000000  0002b640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000049  00000000  00000000  00032522  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__aeabi_uldivmod>:
 80002cc:	b953      	cbnz	r3, 80002e4 <__aeabi_uldivmod+0x18>
 80002ce:	b94a      	cbnz	r2, 80002e4 <__aeabi_uldivmod+0x18>
 80002d0:	2900      	cmp	r1, #0
 80002d2:	bf08      	it	eq
 80002d4:	2800      	cmpeq	r0, #0
 80002d6:	bf1c      	itt	ne
 80002d8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002dc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002e0:	f000 b80c 	b.w	80002fc <__aeabi_idiv0>
 80002e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ec:	f002 f9f6 	bl	80026dc <__udivmoddi4>
 80002f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002f8:	b004      	add	sp, #16
 80002fa:	4770      	bx	lr

080002fc <__aeabi_idiv0>:
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <__do_global_dtors_aux>:
 8000300:	b510      	push	{r4, lr}
 8000302:	4c05      	ldr	r4, [pc, #20]	@ (8000318 <__do_global_dtors_aux+0x18>)
 8000304:	7823      	ldrb	r3, [r4, #0]
 8000306:	b933      	cbnz	r3, 8000316 <__do_global_dtors_aux+0x16>
 8000308:	4b04      	ldr	r3, [pc, #16]	@ (800031c <__do_global_dtors_aux+0x1c>)
 800030a:	b113      	cbz	r3, 8000312 <__do_global_dtors_aux+0x12>
 800030c:	4804      	ldr	r0, [pc, #16]	@ (8000320 <__do_global_dtors_aux+0x20>)
 800030e:	f3af 8000 	nop.w
 8000312:	2301      	movs	r3, #1
 8000314:	7023      	strb	r3, [r4, #0]
 8000316:	bd10      	pop	{r4, pc}
 8000318:	20000014 	.word	0x20000014
 800031c:	00000000 	.word	0x00000000
 8000320:	080029d4 	.word	0x080029d4

08000324 <frame_dummy>:
 8000324:	b508      	push	{r3, lr}
 8000326:	4b03      	ldr	r3, [pc, #12]	@ (8000334 <frame_dummy+0x10>)
 8000328:	b11b      	cbz	r3, 8000332 <frame_dummy+0xe>
 800032a:	4903      	ldr	r1, [pc, #12]	@ (8000338 <frame_dummy+0x14>)
 800032c:	4803      	ldr	r0, [pc, #12]	@ (800033c <frame_dummy+0x18>)
 800032e:	f3af 8000 	nop.w
 8000332:	bd08      	pop	{r3, pc}
 8000334:	00000000 	.word	0x00000000
 8000338:	20000018 	.word	0x20000018
 800033c:	080029d4 	.word	0x080029d4

08000340 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000340:	b082      	sub	sp, #8
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000342:	4b0d      	ldr	r3, [pc, #52]	@ (8000378 <MX_GPIO_Init+0x38>)
 8000344:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000348:	f042 0204 	orr.w	r2, r2, #4
 800034c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000350:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000354:	f002 0204 	and.w	r2, r2, #4
 8000358:	9200      	str	r2, [sp, #0]
 800035a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800035c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000360:	f042 0201 	orr.w	r2, r2, #1
 8000364:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800036c:	f003 0301 	and.w	r3, r3, #1
 8000370:	9301      	str	r3, [sp, #4]
 8000372:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000374:	b002      	add	sp, #8
 8000376:	4770      	bx	lr
 8000378:	58024400 	.word	0x58024400

0800037c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800037c:	b530      	push	{r4, r5, lr}
 800037e:	b085      	sub	sp, #20
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000380:	2400      	movs	r4, #0
 8000382:	9400      	str	r4, [sp, #0]
 8000384:	9401      	str	r4, [sp, #4]
 8000386:	9402      	str	r4, [sp, #8]
 8000388:	9403      	str	r4, [sp, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800038a:	f000 f983 	bl	8000694 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800038e:	2301      	movs	r3, #1
 8000390:	f88d 3000 	strb.w	r3, [sp]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000394:	f88d 4001 	strb.w	r4, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000398:	9401      	str	r4, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800039a:	221f      	movs	r2, #31
 800039c:	f88d 2008 	strb.w	r2, [sp, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80003a0:	2287      	movs	r2, #135	@ 0x87
 80003a2:	f88d 2009 	strb.w	r2, [sp, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80003a6:	f88d 400a 	strb.w	r4, [sp, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80003aa:	f88d 400b 	strb.w	r4, [sp, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80003ae:	f88d 300c 	strb.w	r3, [sp, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80003b2:	f88d 300d 	strb.w	r3, [sp, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80003b6:	f88d 400e 	strb.w	r4, [sp, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80003ba:	f88d 400f 	strb.w	r4, [sp, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80003be:	4668      	mov	r0, sp
 80003c0:	f000 f986 	bl	80006d0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80003c4:	2004      	movs	r0, #4
 80003c6:	f000 f973 	bl	80006b0 <HAL_MPU_Enable>

}
 80003ca:	b005      	add	sp, #20
 80003cc:	bd30      	pop	{r4, r5, pc}

080003ce <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003ce:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003d0:	e7fe      	b.n	80003d0 <Error_Handler+0x2>
	...

080003d4 <SystemClock_Config>:
{
 80003d4:	b510      	push	{r4, lr}
 80003d6:	b09c      	sub	sp, #112	@ 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003d8:	224c      	movs	r2, #76	@ 0x4c
 80003da:	2100      	movs	r1, #0
 80003dc:	a809      	add	r0, sp, #36	@ 0x24
 80003de:	f002 f950 	bl	8002682 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e2:	2220      	movs	r2, #32
 80003e4:	2100      	movs	r1, #0
 80003e6:	a801      	add	r0, sp, #4
 80003e8:	f002 f94b 	bl	8002682 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80003ec:	2002      	movs	r0, #2
 80003ee:	f000 fae1 	bl	80009b4 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80003f2:	2300      	movs	r3, #0
 80003f4:	9300      	str	r3, [sp, #0]
 80003f6:	4a21      	ldr	r2, [pc, #132]	@ (800047c <SystemClock_Config+0xa8>)
 80003f8:	6993      	ldr	r3, [r2, #24]
 80003fa:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80003fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000402:	6193      	str	r3, [r2, #24]
 8000404:	6993      	ldr	r3, [r2, #24]
 8000406:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800040a:	9300      	str	r3, [sp, #0]
 800040c:	9b00      	ldr	r3, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800040e:	4b1b      	ldr	r3, [pc, #108]	@ (800047c <SystemClock_Config+0xa8>)
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8000416:	d0fa      	beq.n	800040e <SystemClock_Config+0x3a>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000418:	2202      	movs	r2, #2
 800041a:	9209      	str	r2, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800041c:	2401      	movs	r4, #1
 800041e:	940c      	str	r4, [sp, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000420:	2340      	movs	r3, #64	@ 0x40
 8000422:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000424:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000426:	2300      	movs	r3, #0
 8000428:	9313      	str	r3, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800042a:	2004      	movs	r0, #4
 800042c:	9014      	str	r0, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 800042e:	210c      	movs	r1, #12
 8000430:	9115      	str	r1, [sp, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000432:	9416      	str	r4, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000434:	9017      	str	r0, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000436:	9218      	str	r2, [sp, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000438:	9119      	str	r1, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800043a:	931a      	str	r3, [sp, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800043c:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800043e:	a809      	add	r0, sp, #36	@ 0x24
 8000440:	f000 fae2 	bl	8000a08 <HAL_RCC_OscConfig>
 8000444:	b9a8      	cbnz	r0, 8000472 <SystemClock_Config+0x9e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000446:	233f      	movs	r3, #63	@ 0x3f
 8000448:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800044a:	2303      	movs	r3, #3
 800044c:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800044e:	2300      	movs	r3, #0
 8000450:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000452:	2308      	movs	r3, #8
 8000454:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000456:	2340      	movs	r3, #64	@ 0x40
 8000458:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800045a:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800045c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000460:	9207      	str	r2, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000462:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000464:	2101      	movs	r1, #1
 8000466:	a801      	add	r0, sp, #4
 8000468:	f000 febc 	bl	80011e4 <HAL_RCC_ClockConfig>
 800046c:	b918      	cbnz	r0, 8000476 <SystemClock_Config+0xa2>
}
 800046e:	b01c      	add	sp, #112	@ 0x70
 8000470:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000472:	f7ff ffac 	bl	80003ce <Error_Handler>
    Error_Handler();
 8000476:	f7ff ffaa 	bl	80003ce <Error_Handler>
 800047a:	bf00      	nop
 800047c:	58024800 	.word	0x58024800

08000480 <main>:
{
 8000480:	b508      	push	{r3, lr}
  MPU_Config();
 8000482:	f7ff ff7b 	bl	800037c <MPU_Config>
  HAL_Init();
 8000486:	f000 f84b 	bl	8000520 <HAL_Init>
  SystemClock_Config();
 800048a:	f7ff ffa3 	bl	80003d4 <SystemClock_Config>
  MX_GPIO_Init();
 800048e:	f7ff ff57 	bl	8000340 <MX_GPIO_Init>
  BSP_LED_Init(LED_GREEN);
 8000492:	2000      	movs	r0, #0
 8000494:	f001 ff7c 	bl	8002390 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000498:	2001      	movs	r0, #1
 800049a:	f001 ff79 	bl	8002390 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800049e:	2002      	movs	r0, #2
 80004a0:	f001 ff76 	bl	8002390 <BSP_LED_Init>
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80004a4:	2101      	movs	r1, #1
 80004a6:	2000      	movs	r0, #0
 80004a8:	f001 ffc4 	bl	8002434 <BSP_PB_Init>
  BspCOMInit.BaudRate   = 115200;
 80004ac:	4907      	ldr	r1, [pc, #28]	@ (80004cc <main+0x4c>)
 80004ae:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80004b2:	600b      	str	r3, [r1, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80004b4:	2000      	movs	r0, #0
 80004b6:	6048      	str	r0, [r1, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80004b8:	8108      	strh	r0, [r1, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80004ba:	8148      	strh	r0, [r1, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80004bc:	8188      	strh	r0, [r1, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80004be:	f002 f827 	bl	8002510 <BSP_COM_Init>
 80004c2:	b900      	cbnz	r0, 80004c6 <main+0x46>
  while (1)
 80004c4:	e7fe      	b.n	80004c4 <main+0x44>
    Error_Handler();
 80004c6:	f7ff ff82 	bl	80003ce <Error_Handler>
 80004ca:	bf00      	nop
 80004cc:	20000030 	.word	0x20000030

080004d0 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80004d0:	4b10      	ldr	r3, [pc, #64]	@ (8000514 <HAL_InitTick+0x44>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	b90b      	cbnz	r3, 80004da <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80004d6:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80004d8:	4770      	bx	lr
{
 80004da:	b510      	push	{r4, lr}
 80004dc:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80004de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80004e6:	4a0c      	ldr	r2, [pc, #48]	@ (8000518 <HAL_InitTick+0x48>)
 80004e8:	6810      	ldr	r0, [r2, #0]
 80004ea:	fbb0 f0f3 	udiv	r0, r0, r3
 80004ee:	f000 f8bd 	bl	800066c <HAL_SYSTICK_Config>
 80004f2:	b968      	cbnz	r0, 8000510 <HAL_InitTick+0x40>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004f4:	2c0f      	cmp	r4, #15
 80004f6:	d901      	bls.n	80004fc <HAL_InitTick+0x2c>
    return HAL_ERROR;
 80004f8:	2001      	movs	r0, #1
 80004fa:	e00a      	b.n	8000512 <HAL_InitTick+0x42>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004fc:	2200      	movs	r2, #0
 80004fe:	4621      	mov	r1, r4
 8000500:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000504:	f000 f89e 	bl	8000644 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000508:	4b04      	ldr	r3, [pc, #16]	@ (800051c <HAL_InitTick+0x4c>)
 800050a:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 800050c:	2000      	movs	r0, #0
 800050e:	e000      	b.n	8000512 <HAL_InitTick+0x42>
      return HAL_ERROR;
 8000510:	2001      	movs	r0, #1
}
 8000512:	bd10      	pop	{r4, pc}
 8000514:	20000000 	.word	0x20000000
 8000518:	20000010 	.word	0x20000010
 800051c:	20000004 	.word	0x20000004

08000520 <HAL_Init>:
{
 8000520:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000522:	2003      	movs	r0, #3
 8000524:	f000 f87c 	bl	8000620 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000528:	f000 fd60 	bl	8000fec <HAL_RCC_GetSysClockFreq>
 800052c:	490f      	ldr	r1, [pc, #60]	@ (800056c <HAL_Init+0x4c>)
 800052e:	698b      	ldr	r3, [r1, #24]
 8000530:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8000534:	4a0e      	ldr	r2, [pc, #56]	@ (8000570 <HAL_Init+0x50>)
 8000536:	5cd3      	ldrb	r3, [r2, r3]
 8000538:	f003 031f 	and.w	r3, r3, #31
 800053c:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800053e:	698b      	ldr	r3, [r1, #24]
 8000540:	f003 030f 	and.w	r3, r3, #15
 8000544:	5cd3      	ldrb	r3, [r2, r3]
 8000546:	f003 031f 	and.w	r3, r3, #31
 800054a:	fa20 f303 	lsr.w	r3, r0, r3
 800054e:	4a09      	ldr	r2, [pc, #36]	@ (8000574 <HAL_Init+0x54>)
 8000550:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8000552:	4b09      	ldr	r3, [pc, #36]	@ (8000578 <HAL_Init+0x58>)
 8000554:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000556:	2000      	movs	r0, #0
 8000558:	f7ff ffba 	bl	80004d0 <HAL_InitTick>
 800055c:	b110      	cbz	r0, 8000564 <HAL_Init+0x44>
    return HAL_ERROR;
 800055e:	2401      	movs	r4, #1
}
 8000560:	4620      	mov	r0, r4
 8000562:	bd10      	pop	{r4, pc}
 8000564:	4604      	mov	r4, r0
  HAL_MspInit();
 8000566:	f000 fa13 	bl	8000990 <HAL_MspInit>
  return HAL_OK;
 800056a:	e7f9      	b.n	8000560 <HAL_Init+0x40>
 800056c:	58024400 	.word	0x58024400
 8000570:	08002a18 	.word	0x08002a18
 8000574:	2000000c 	.word	0x2000000c
 8000578:	20000010 	.word	0x20000010

0800057c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800057c:	4b03      	ldr	r3, [pc, #12]	@ (800058c <HAL_IncTick+0x10>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	4a03      	ldr	r2, [pc, #12]	@ (8000590 <HAL_IncTick+0x14>)
 8000582:	6811      	ldr	r1, [r2, #0]
 8000584:	440b      	add	r3, r1
 8000586:	6013      	str	r3, [r2, #0]
}
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000000 	.word	0x20000000
 8000590:	20000040 	.word	0x20000040

08000594 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000594:	4b01      	ldr	r3, [pc, #4]	@ (800059c <HAL_GetTick+0x8>)
 8000596:	6818      	ldr	r0, [r3, #0]
}
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000040 	.word	0x20000040

080005a0 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 80005a0:	2800      	cmp	r0, #0
 80005a2:	db07      	blt.n	80005b4 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005a4:	f000 021f 	and.w	r2, r0, #31
 80005a8:	0940      	lsrs	r0, r0, #5
 80005aa:	2301      	movs	r3, #1
 80005ac:	4093      	lsls	r3, r2
 80005ae:	4a02      	ldr	r2, [pc, #8]	@ (80005b8 <__NVIC_EnableIRQ+0x18>)
 80005b0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	e000e100 	.word	0xe000e100

080005bc <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80005bc:	2800      	cmp	r0, #0
 80005be:	db04      	blt.n	80005ca <__NVIC_SetPriority+0xe>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c0:	0109      	lsls	r1, r1, #4
 80005c2:	b2c9      	uxtb	r1, r1
 80005c4:	4b04      	ldr	r3, [pc, #16]	@ (80005d8 <__NVIC_SetPriority+0x1c>)
 80005c6:	5419      	strb	r1, [r3, r0]
 80005c8:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ca:	f000 000f 	and.w	r0, r0, #15
 80005ce:	0109      	lsls	r1, r1, #4
 80005d0:	b2c9      	uxtb	r1, r1
 80005d2:	4b02      	ldr	r3, [pc, #8]	@ (80005dc <__NVIC_SetPriority+0x20>)
 80005d4:	5419      	strb	r1, [r3, r0]
  }
}
 80005d6:	4770      	bx	lr
 80005d8:	e000e400 	.word	0xe000e400
 80005dc:	e000ed14 	.word	0xe000ed14

080005e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005e0:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005e2:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005e6:	f1c0 0c07 	rsb	ip, r0, #7
 80005ea:	f1bc 0f04 	cmp.w	ip, #4
 80005ee:	bf28      	it	cs
 80005f0:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005f4:	1d03      	adds	r3, r0, #4
 80005f6:	2b06      	cmp	r3, #6
 80005f8:	d90f      	bls.n	800061a <NVIC_EncodePriority+0x3a>
 80005fa:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005fc:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8000600:	fa0e f00c 	lsl.w	r0, lr, ip
 8000604:	ea21 0100 	bic.w	r1, r1, r0
 8000608:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800060a:	fa0e fe03 	lsl.w	lr, lr, r3
 800060e:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8000612:	ea41 0002 	orr.w	r0, r1, r2
 8000616:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800061a:	2300      	movs	r3, #0
 800061c:	e7ee      	b.n	80005fc <NVIC_EncodePriority+0x1c>
	...

08000620 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000620:	4906      	ldr	r1, [pc, #24]	@ (800063c <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8000622:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000624:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000628:	041b      	lsls	r3, r3, #16
 800062a:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800062c:	0200      	lsls	r0, r0, #8
 800062e:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000632:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000634:	4a02      	ldr	r2, [pc, #8]	@ (8000640 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000636:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8000638:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800063a:	4770      	bx	lr
 800063c:	e000ed00 	.word	0xe000ed00
 8000640:	05fa0000 	.word	0x05fa0000

08000644 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000644:	b510      	push	{r4, lr}
 8000646:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000648:	4b05      	ldr	r3, [pc, #20]	@ (8000660 <HAL_NVIC_SetPriority+0x1c>)
 800064a:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800064c:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000650:	f7ff ffc6 	bl	80005e0 <NVIC_EncodePriority>
 8000654:	4601      	mov	r1, r0
 8000656:	4620      	mov	r0, r4
 8000658:	f7ff ffb0 	bl	80005bc <__NVIC_SetPriority>
}
 800065c:	bd10      	pop	{r4, pc}
 800065e:	bf00      	nop
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000664:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000666:	f7ff ff9b 	bl	80005a0 <__NVIC_EnableIRQ>
}
 800066a:	bd08      	pop	{r3, pc}

0800066c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800066c:	3801      	subs	r0, #1
 800066e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000672:	d20b      	bcs.n	800068c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000674:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000678:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067a:	4a05      	ldr	r2, [pc, #20]	@ (8000690 <HAL_SYSTICK_Config+0x24>)
 800067c:	21f0      	movs	r1, #240	@ 0xf0
 800067e:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000682:	2000      	movs	r0, #0
 8000684:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000686:	2207      	movs	r2, #7
 8000688:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800068a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800068c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800068e:	4770      	bx	lr
 8000690:	e000ed00 	.word	0xe000ed00

08000694 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000694:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000698:	4b04      	ldr	r3, [pc, #16]	@ (80006ac <HAL_MPU_Disable+0x18>)
 800069a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800069c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80006a0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80006a2:	2200      	movs	r2, #0
 80006a4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	e000ed00 	.word	0xe000ed00

080006b0 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80006b0:	f040 0001 	orr.w	r0, r0, #1
 80006b4:	4b05      	ldr	r3, [pc, #20]	@ (80006cc <HAL_MPU_Enable+0x1c>)
 80006b6:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80006ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80006bc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80006c0:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80006c2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80006c6:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80006ca:	4770      	bx	lr
 80006cc:	e000ed00 	.word	0xe000ed00

080006d0 <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80006d0:	7843      	ldrb	r3, [r0, #1]
 80006d2:	4a14      	ldr	r2, [pc, #80]	@ (8000724 <HAL_MPU_ConfigRegion+0x54>)
 80006d4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80006d8:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 80006dc:	f023 0301 	bic.w	r3, r3, #1
 80006e0:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80006e4:	6843      	ldr	r3, [r0, #4]
 80006e6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80006ea:	7b01      	ldrb	r1, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80006ec:	7ac3      	ldrb	r3, [r0, #11]
 80006ee:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80006f0:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80006f4:	7a81      	ldrb	r1, [r0, #10]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80006f6:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80006fa:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80006fc:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000700:	7b81      	ldrb	r1, [r0, #14]
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000702:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000706:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000708:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800070c:	7a41      	ldrb	r1, [r0, #9]
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800070e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000712:	7a01      	ldrb	r1, [r0, #8]
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000714:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000718:	7801      	ldrb	r1, [r0, #0]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800071a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800071c:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	e000ed00 	.word	0xe000ed00

08000728 <HAL_EXTI_RegisterCallback>:
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check null pointer */
  if (hexti == NULL)
 8000728:	b118      	cbz	r0, 8000732 <HAL_EXTI_RegisterCallback+0xa>
  {
    return HAL_ERROR;
  }

  switch (CallbackID)
 800072a:	b921      	cbnz	r1, 8000736 <HAL_EXTI_RegisterCallback+0xe>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800072c:	6042      	str	r2, [r0, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800072e:	4608      	mov	r0, r1
      break;
 8000730:	4770      	bx	lr
    return HAL_ERROR;
 8000732:	2001      	movs	r0, #1
 8000734:	4770      	bx	lr

    default:
      status = HAL_ERROR;
 8000736:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 8000738:	4770      	bx	lr

0800073a <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800073a:	b110      	cbz	r0, 8000742 <HAL_EXTI_GetHandle+0x8>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800073c:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 800073e:	2000      	movs	r0, #0
 8000740:	4770      	bx	lr
    return HAL_ERROR;
 8000742:	2001      	movs	r0, #1
  }
}
 8000744:	4770      	bx	lr
	...

08000748 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8000748:	b510      	push	{r4, lr}
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800074a:	6803      	ldr	r3, [r0, #0]
 800074c:	f3c3 4201 	ubfx	r2, r3, #16, #2
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8000750:	f003 031f 	and.w	r3, r3, #31
 8000754:	2101      	movs	r1, #1
 8000756:	4099      	lsls	r1, r3
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8000758:	0113      	lsls	r3, r2, #4
 800075a:	4a04      	ldr	r2, [pc, #16]	@ (800076c <HAL_EXTI_IRQHandler+0x24>)
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 800075c:	589c      	ldr	r4, [r3, r2]

  if (regval != 0x00U)
 800075e:	420c      	tst	r4, r1
 8000760:	d003      	beq.n	800076a <HAL_EXTI_IRQHandler+0x22>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8000762:	5099      	str	r1, [r3, r2]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8000764:	6843      	ldr	r3, [r0, #4]
 8000766:	b103      	cbz	r3, 800076a <HAL_EXTI_IRQHandler+0x22>
    {
      hexti->PendingCallback();
 8000768:	4798      	blx	r3
    }
  }
}
 800076a:	bd10      	pop	{r4, pc}
 800076c:	58000088 	.word	0x58000088

08000770 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8000770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000772:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8000774:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000776:	e06b      	b.n	8000850 <HAL_GPIO_Init+0xe0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000778:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800077a:	005e      	lsls	r6, r3, #1
 800077c:	2403      	movs	r4, #3
 800077e:	40b4      	lsls	r4, r6
 8000780:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000784:	68cc      	ldr	r4, [r1, #12]
 8000786:	40b4      	lsls	r4, r6
 8000788:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800078a:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800078c:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800078e:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000792:	684c      	ldr	r4, [r1, #4]
 8000794:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8000798:	409c      	lsls	r4, r3
 800079a:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 800079c:	6044      	str	r4, [r0, #4]
 800079e:	e069      	b.n	8000874 <HAL_GPIO_Init+0x104>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80007a0:	08dd      	lsrs	r5, r3, #3
 80007a2:	3508      	adds	r5, #8
 80007a4:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80007a8:	f003 0c07 	and.w	ip, r3, #7
 80007ac:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80007b0:	f04f 0e0f 	mov.w	lr, #15
 80007b4:	fa0e fe0c 	lsl.w	lr, lr, ip
 80007b8:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80007bc:	690c      	ldr	r4, [r1, #16]
 80007be:	fa04 f40c 	lsl.w	r4, r4, ip
 80007c2:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 80007c6:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 80007ca:	e06b      	b.n	80008a4 <HAL_GPIO_Init+0x134>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80007cc:	2409      	movs	r4, #9
 80007ce:	e000      	b.n	80007d2 <HAL_GPIO_Init+0x62>
 80007d0:	2400      	movs	r4, #0
 80007d2:	fa04 f40e 	lsl.w	r4, r4, lr
 80007d6:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80007d8:	f10c 0c02 	add.w	ip, ip, #2
 80007dc:	4d66      	ldr	r5, [pc, #408]	@ (8000978 <HAL_GPIO_Init+0x208>)
 80007de:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80007e2:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
 80007e6:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80007e8:	43d4      	mvns	r4, r2
 80007ea:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80007ee:	684f      	ldr	r7, [r1, #4]
 80007f0:	f417 1f80 	tst.w	r7, #1048576	@ 0x100000
 80007f4:	d001      	beq.n	80007fa <HAL_GPIO_Init+0x8a>
        {
          temp |= iocurrent;
 80007f6:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80007fa:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 80007fe:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8000800:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8000802:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000806:	684f      	ldr	r7, [r1, #4]
 8000808:	f417 1f00 	tst.w	r7, #2097152	@ 0x200000
 800080c:	d001      	beq.n	8000812 <HAL_GPIO_Init+0xa2>
        {
          temp |= iocurrent;
 800080e:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8000812:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 8000816:	606e      	str	r6, [r5, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000818:	f8d5 5084 	ldr.w	r5, [r5, #132]	@ 0x84
        temp &= ~(iocurrent);
 800081c:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000820:	684f      	ldr	r7, [r1, #4]
 8000822:	f417 3f00 	tst.w	r7, #131072	@ 0x20000
 8000826:	d001      	beq.n	800082c <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8000828:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800082c:	f04f 45b0 	mov.w	r5, #1476395008	@ 0x58000000
 8000830:	f8c5 6084 	str.w	r6, [r5, #132]	@ 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000834:	f8d5 5080 	ldr.w	r5, [r5, #128]	@ 0x80
        temp &= ~(iocurrent);
 8000838:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800083a:	684e      	ldr	r6, [r1, #4]
 800083c:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
 8000840:	d001      	beq.n	8000846 <HAL_GPIO_Init+0xd6>
        {
          temp |= iocurrent;
 8000842:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000846:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800084a:	f8c2 4080 	str.w	r4, [r2, #128]	@ 0x80
      }
    }

    position++;
 800084e:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000850:	680a      	ldr	r2, [r1, #0]
 8000852:	fa32 f403 	lsrs.w	r4, r2, r3
 8000856:	f000 808c 	beq.w	8000972 <HAL_GPIO_Init+0x202>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800085a:	f04f 0c01 	mov.w	ip, #1
 800085e:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00U)
 8000862:	ea1c 0202 	ands.w	r2, ip, r2
 8000866:	d0f2      	beq.n	800084e <HAL_GPIO_Init+0xde>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000868:	684c      	ldr	r4, [r1, #4]
 800086a:	f004 0403 	and.w	r4, r4, #3
 800086e:	3c01      	subs	r4, #1
 8000870:	2c01      	cmp	r4, #1
 8000872:	d981      	bls.n	8000778 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000874:	684c      	ldr	r4, [r1, #4]
 8000876:	f004 0403 	and.w	r4, r4, #3
 800087a:	2c03      	cmp	r4, #3
 800087c:	d00c      	beq.n	8000898 <HAL_GPIO_Init+0x128>
      temp = GPIOx->PUPDR;
 800087e:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000880:	005d      	lsls	r5, r3, #1
 8000882:	f04f 0c03 	mov.w	ip, #3
 8000886:	fa0c fc05 	lsl.w	ip, ip, r5
 800088a:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800088e:	688c      	ldr	r4, [r1, #8]
 8000890:	40ac      	lsls	r4, r5
 8000892:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->PUPDR = temp;
 8000896:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000898:	684c      	ldr	r4, [r1, #4]
 800089a:	f004 0403 	and.w	r4, r4, #3
 800089e:	2c02      	cmp	r4, #2
 80008a0:	f43f af7e 	beq.w	80007a0 <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 80008a4:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80008a6:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80008aa:	f04f 0c03 	mov.w	ip, #3
 80008ae:	fa0c fc0e 	lsl.w	ip, ip, lr
 80008b2:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008b6:	684c      	ldr	r4, [r1, #4]
 80008b8:	f004 0403 	and.w	r4, r4, #3
 80008bc:	fa04 f40e 	lsl.w	r4, r4, lr
 80008c0:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 80008c4:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80008c6:	684c      	ldr	r4, [r1, #4]
 80008c8:	f414 3f40 	tst.w	r4, #196608	@ 0x30000
 80008cc:	d0bf      	beq.n	800084e <HAL_GPIO_Init+0xde>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ce:	4c2b      	ldr	r4, [pc, #172]	@ (800097c <HAL_GPIO_Init+0x20c>)
 80008d0:	f8d4 50f4 	ldr.w	r5, [r4, #244]	@ 0xf4
 80008d4:	f045 0502 	orr.w	r5, r5, #2
 80008d8:	f8c4 50f4 	str.w	r5, [r4, #244]	@ 0xf4
 80008dc:	f8d4 40f4 	ldr.w	r4, [r4, #244]	@ 0xf4
 80008e0:	f004 0402 	and.w	r4, r4, #2
 80008e4:	9401      	str	r4, [sp, #4]
 80008e6:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80008e8:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 80008ec:	f10c 0502 	add.w	r5, ip, #2
 80008f0:	4c21      	ldr	r4, [pc, #132]	@ (8000978 <HAL_GPIO_Init+0x208>)
 80008f2:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80008f6:	f003 0e03 	and.w	lr, r3, #3
 80008fa:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80008fe:	240f      	movs	r4, #15
 8000900:	fa04 f40e 	lsl.w	r4, r4, lr
 8000904:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000908:	4c1d      	ldr	r4, [pc, #116]	@ (8000980 <HAL_GPIO_Init+0x210>)
 800090a:	42a0      	cmp	r0, r4
 800090c:	f43f af60 	beq.w	80007d0 <HAL_GPIO_Init+0x60>
 8000910:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000914:	42a0      	cmp	r0, r4
 8000916:	d01e      	beq.n	8000956 <HAL_GPIO_Init+0x1e6>
 8000918:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800091c:	42a0      	cmp	r0, r4
 800091e:	d01c      	beq.n	800095a <HAL_GPIO_Init+0x1ea>
 8000920:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000924:	42a0      	cmp	r0, r4
 8000926:	d01a      	beq.n	800095e <HAL_GPIO_Init+0x1ee>
 8000928:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800092c:	42a0      	cmp	r0, r4
 800092e:	d018      	beq.n	8000962 <HAL_GPIO_Init+0x1f2>
 8000930:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000934:	42a0      	cmp	r0, r4
 8000936:	d016      	beq.n	8000966 <HAL_GPIO_Init+0x1f6>
 8000938:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800093c:	42a0      	cmp	r0, r4
 800093e:	d014      	beq.n	800096a <HAL_GPIO_Init+0x1fa>
 8000940:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8000944:	42a0      	cmp	r0, r4
 8000946:	d012      	beq.n	800096e <HAL_GPIO_Init+0x1fe>
 8000948:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
 800094c:	42a0      	cmp	r0, r4
 800094e:	f43f af3d 	beq.w	80007cc <HAL_GPIO_Init+0x5c>
 8000952:	240a      	movs	r4, #10
 8000954:	e73d      	b.n	80007d2 <HAL_GPIO_Init+0x62>
 8000956:	2401      	movs	r4, #1
 8000958:	e73b      	b.n	80007d2 <HAL_GPIO_Init+0x62>
 800095a:	2402      	movs	r4, #2
 800095c:	e739      	b.n	80007d2 <HAL_GPIO_Init+0x62>
 800095e:	2403      	movs	r4, #3
 8000960:	e737      	b.n	80007d2 <HAL_GPIO_Init+0x62>
 8000962:	2404      	movs	r4, #4
 8000964:	e735      	b.n	80007d2 <HAL_GPIO_Init+0x62>
 8000966:	2405      	movs	r4, #5
 8000968:	e733      	b.n	80007d2 <HAL_GPIO_Init+0x62>
 800096a:	2406      	movs	r4, #6
 800096c:	e731      	b.n	80007d2 <HAL_GPIO_Init+0x62>
 800096e:	2407      	movs	r4, #7
 8000970:	e72f      	b.n	80007d2 <HAL_GPIO_Init+0x62>
  }
}
 8000972:	b003      	add	sp, #12
 8000974:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000976:	bf00      	nop
 8000978:	58000400 	.word	0x58000400
 800097c:	58024400 	.word	0x58024400
 8000980:	58020000 	.word	0x58020000

08000984 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000984:	b10a      	cbz	r2, 800098a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000986:	6181      	str	r1, [r0, #24]
 8000988:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800098a:	0409      	lsls	r1, r1, #16
 800098c:	6181      	str	r1, [r0, #24]
  }
}
 800098e:	4770      	bx	lr

08000990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000990:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000992:	4b07      	ldr	r3, [pc, #28]	@ (80009b0 <HAL_MspInit+0x20>)
 8000994:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8000998:	f042 0202 	orr.w	r2, r2, #2
 800099c:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 80009a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009a4:	f003 0302 	and.w	r3, r3, #2
 80009a8:	9301      	str	r3, [sp, #4]
 80009aa:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ac:	b002      	add	sp, #8
 80009ae:	4770      	bx	lr
 80009b0:	58024400 	.word	0x58024400

080009b4 <HAL_PWREx_ConfigSupply>:
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80009b4:	4b13      	ldr	r3, [pc, #76]	@ (8000a04 <HAL_PWREx_ConfigSupply+0x50>)
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	f013 0f04 	tst.w	r3, #4
 80009bc:	d107      	bne.n	80009ce <HAL_PWREx_ConfigSupply+0x1a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80009be:	4b11      	ldr	r3, [pc, #68]	@ (8000a04 <HAL_PWREx_ConfigSupply+0x50>)
 80009c0:	68db      	ldr	r3, [r3, #12]
 80009c2:	f003 0307 	and.w	r3, r3, #7
 80009c6:	4283      	cmp	r3, r0
 80009c8:	d01a      	beq.n	8000a00 <HAL_PWREx_ConfigSupply+0x4c>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80009ca:	2001      	movs	r0, #1
 80009cc:	4770      	bx	lr
{
 80009ce:	b510      	push	{r4, lr}
      return HAL_OK;
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80009d0:	4a0c      	ldr	r2, [pc, #48]	@ (8000a04 <HAL_PWREx_ConfigSupply+0x50>)
 80009d2:	68d3      	ldr	r3, [r2, #12]
 80009d4:	f023 0307 	bic.w	r3, r3, #7
 80009d8:	4303      	orrs	r3, r0
 80009da:	60d3      	str	r3, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80009dc:	f7ff fdda 	bl	8000594 <HAL_GetTick>
 80009e0:	4604      	mov	r4, r0

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80009e2:	4b08      	ldr	r3, [pc, #32]	@ (8000a04 <HAL_PWREx_ConfigSupply+0x50>)
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 80009ea:	d107      	bne.n	80009fc <HAL_PWREx_ConfigSupply+0x48>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80009ec:	f7ff fdd2 	bl	8000594 <HAL_GetTick>
 80009f0:	1b00      	subs	r0, r0, r4
 80009f2:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80009f6:	d9f4      	bls.n	80009e2 <HAL_PWREx_ConfigSupply+0x2e>
    {
      return HAL_ERROR;
 80009f8:	2001      	movs	r0, #1
 80009fa:	e000      	b.n	80009fe <HAL_PWREx_ConfigSupply+0x4a>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80009fc:	2000      	movs	r0, #0
}
 80009fe:	bd10      	pop	{r4, pc}
      return HAL_OK;
 8000a00:	2000      	movs	r0, #0
}
 8000a02:	4770      	bx	lr
 8000a04:	58024800 	.word	0x58024800

08000a08 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000a08:	2800      	cmp	r0, #0
 8000a0a:	f000 82d5 	beq.w	8000fb8 <HAL_RCC_OscConfig+0x5b0>
{
 8000a0e:	b538      	push	{r3, r4, r5, lr}
 8000a10:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a12:	6803      	ldr	r3, [r0, #0]
 8000a14:	f013 0f01 	tst.w	r3, #1
 8000a18:	d025      	beq.n	8000a66 <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000a1a:	4aa0      	ldr	r2, [pc, #640]	@ (8000c9c <HAL_RCC_OscConfig+0x294>)
 8000a1c:	6913      	ldr	r3, [r2, #16]
 8000a1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000a22:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000a24:	2b10      	cmp	r3, #16
 8000a26:	d015      	beq.n	8000a54 <HAL_RCC_OscConfig+0x4c>
 8000a28:	2b18      	cmp	r3, #24
 8000a2a:	d00f      	beq.n	8000a4c <HAL_RCC_OscConfig+0x44>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a2c:	6863      	ldr	r3, [r4, #4]
 8000a2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000a32:	d03f      	beq.n	8000ab4 <HAL_RCC_OscConfig+0xac>
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d153      	bne.n	8000ae0 <HAL_RCC_OscConfig+0xd8>
 8000a38:	4b98      	ldr	r3, [pc, #608]	@ (8000c9c <HAL_RCC_OscConfig+0x294>)
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	e038      	b.n	8000abe <HAL_RCC_OscConfig+0xb6>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000a4c:	f002 0203 	and.w	r2, r2, #3
 8000a50:	2a02      	cmp	r2, #2
 8000a52:	d1eb      	bne.n	8000a2c <HAL_RCC_OscConfig+0x24>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a54:	4b91      	ldr	r3, [pc, #580]	@ (8000c9c <HAL_RCC_OscConfig+0x294>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000a5c:	d003      	beq.n	8000a66 <HAL_RCC_OscConfig+0x5e>
 8000a5e:	6863      	ldr	r3, [r4, #4]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	f000 82ab 	beq.w	8000fbc <HAL_RCC_OscConfig+0x5b4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a66:	6823      	ldr	r3, [r4, #0]
 8000a68:	f013 0f02 	tst.w	r3, #2
 8000a6c:	f000 8088 	beq.w	8000b80 <HAL_RCC_OscConfig+0x178>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000a70:	4a8a      	ldr	r2, [pc, #552]	@ (8000c9c <HAL_RCC_OscConfig+0x294>)
 8000a72:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000a74:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000a76:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 8000a7a:	d05a      	beq.n	8000b32 <HAL_RCC_OscConfig+0x12a>
 8000a7c:	2b18      	cmp	r3, #24
 8000a7e:	d055      	beq.n	8000b2c <HAL_RCC_OscConfig+0x124>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000a80:	68e3      	ldr	r3, [r4, #12]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	f000 80a9 	beq.w	8000bda <HAL_RCC_OscConfig+0x1d2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000a88:	4984      	ldr	r1, [pc, #528]	@ (8000c9c <HAL_RCC_OscConfig+0x294>)
 8000a8a:	680a      	ldr	r2, [r1, #0]
 8000a8c:	f022 0219 	bic.w	r2, r2, #25
 8000a90:	4313      	orrs	r3, r2
 8000a92:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000a94:	f7ff fd7e 	bl	8000594 <HAL_GetTick>
 8000a98:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000a9a:	4b80      	ldr	r3, [pc, #512]	@ (8000c9c <HAL_RCC_OscConfig+0x294>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f013 0f04 	tst.w	r3, #4
 8000aa2:	f040 8091 	bne.w	8000bc8 <HAL_RCC_OscConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000aa6:	f7ff fd75 	bl	8000594 <HAL_GetTick>
 8000aaa:	1b40      	subs	r0, r0, r5
 8000aac:	2802      	cmp	r0, #2
 8000aae:	d9f4      	bls.n	8000a9a <HAL_RCC_OscConfig+0x92>
          {
            return HAL_TIMEOUT;
 8000ab0:	2003      	movs	r0, #3
 8000ab2:	e28a      	b.n	8000fca <HAL_RCC_OscConfig+0x5c2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ab4:	4a79      	ldr	r2, [pc, #484]	@ (8000c9c <HAL_RCC_OscConfig+0x294>)
 8000ab6:	6813      	ldr	r3, [r2, #0]
 8000ab8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000abc:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000abe:	6863      	ldr	r3, [r4, #4]
 8000ac0:	b32b      	cbz	r3, 8000b0e <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 8000ac2:	f7ff fd67 	bl	8000594 <HAL_GetTick>
 8000ac6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000ac8:	4b74      	ldr	r3, [pc, #464]	@ (8000c9c <HAL_RCC_OscConfig+0x294>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000ad0:	d1c9      	bne.n	8000a66 <HAL_RCC_OscConfig+0x5e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ad2:	f7ff fd5f 	bl	8000594 <HAL_GetTick>
 8000ad6:	1b40      	subs	r0, r0, r5
 8000ad8:	2864      	cmp	r0, #100	@ 0x64
 8000ada:	d9f5      	bls.n	8000ac8 <HAL_RCC_OscConfig+0xc0>
            return HAL_TIMEOUT;
 8000adc:	2003      	movs	r0, #3
 8000ade:	e274      	b.n	8000fca <HAL_RCC_OscConfig+0x5c2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ae0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000ae4:	d009      	beq.n	8000afa <HAL_RCC_OscConfig+0xf2>
 8000ae6:	4b6d      	ldr	r3, [pc, #436]	@ (8000c9c <HAL_RCC_OscConfig+0x294>)
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	e7e1      	b.n	8000abe <HAL_RCC_OscConfig+0xb6>
 8000afa:	4b68      	ldr	r3, [pc, #416]	@ (8000c9c <HAL_RCC_OscConfig+0x294>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	e7d7      	b.n	8000abe <HAL_RCC_OscConfig+0xb6>
        tickstart = HAL_GetTick();
 8000b0e:	f7ff fd41 	bl	8000594 <HAL_GetTick>
 8000b12:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000b14:	4b61      	ldr	r3, [pc, #388]	@ (8000c9c <HAL_RCC_OscConfig+0x294>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000b1c:	d0a3      	beq.n	8000a66 <HAL_RCC_OscConfig+0x5e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b1e:	f7ff fd39 	bl	8000594 <HAL_GetTick>
 8000b22:	1b40      	subs	r0, r0, r5
 8000b24:	2864      	cmp	r0, #100	@ 0x64
 8000b26:	d9f5      	bls.n	8000b14 <HAL_RCC_OscConfig+0x10c>
            return HAL_TIMEOUT;
 8000b28:	2003      	movs	r0, #3
 8000b2a:	e24e      	b.n	8000fca <HAL_RCC_OscConfig+0x5c2>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000b2c:	f012 0f03 	tst.w	r2, #3
 8000b30:	d1a6      	bne.n	8000a80 <HAL_RCC_OscConfig+0x78>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000b32:	4b5a      	ldr	r3, [pc, #360]	@ (8000c9c <HAL_RCC_OscConfig+0x294>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f013 0f04 	tst.w	r3, #4
 8000b3a:	d003      	beq.n	8000b44 <HAL_RCC_OscConfig+0x13c>
 8000b3c:	68e3      	ldr	r3, [r4, #12]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	f000 823e 	beq.w	8000fc0 <HAL_RCC_OscConfig+0x5b8>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000b44:	4a55      	ldr	r2, [pc, #340]	@ (8000c9c <HAL_RCC_OscConfig+0x294>)
 8000b46:	6813      	ldr	r3, [r2, #0]
 8000b48:	f023 0319 	bic.w	r3, r3, #25
 8000b4c:	68e1      	ldr	r1, [r4, #12]
 8000b4e:	430b      	orrs	r3, r1
 8000b50:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000b52:	f7ff fd1f 	bl	8000594 <HAL_GetTick>
 8000b56:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000b58:	4b50      	ldr	r3, [pc, #320]	@ (8000c9c <HAL_RCC_OscConfig+0x294>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f013 0f04 	tst.w	r3, #4
 8000b60:	d106      	bne.n	8000b70 <HAL_RCC_OscConfig+0x168>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b62:	f7ff fd17 	bl	8000594 <HAL_GetTick>
 8000b66:	1b40      	subs	r0, r0, r5
 8000b68:	2802      	cmp	r0, #2
 8000b6a:	d9f5      	bls.n	8000b58 <HAL_RCC_OscConfig+0x150>
            return HAL_TIMEOUT;
 8000b6c:	2003      	movs	r0, #3
 8000b6e:	e22c      	b.n	8000fca <HAL_RCC_OscConfig+0x5c2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b70:	4a4a      	ldr	r2, [pc, #296]	@ (8000c9c <HAL_RCC_OscConfig+0x294>)
 8000b72:	6853      	ldr	r3, [r2, #4]
 8000b74:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8000b78:	6921      	ldr	r1, [r4, #16]
 8000b7a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8000b7e:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000b80:	6823      	ldr	r3, [r4, #0]
 8000b82:	f013 0f10 	tst.w	r3, #16
 8000b86:	d051      	beq.n	8000c2c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b88:	4a44      	ldr	r2, [pc, #272]	@ (8000c9c <HAL_RCC_OscConfig+0x294>)
 8000b8a:	6913      	ldr	r3, [r2, #16]
 8000b8c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000b90:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8000b92:	2b08      	cmp	r3, #8
 8000b94:	d039      	beq.n	8000c0a <HAL_RCC_OscConfig+0x202>
 8000b96:	2b18      	cmp	r3, #24
 8000b98:	d033      	beq.n	8000c02 <HAL_RCC_OscConfig+0x1fa>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8000b9a:	69e3      	ldr	r3, [r4, #28]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d069      	beq.n	8000c74 <HAL_RCC_OscConfig+0x26c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8000ba0:	4a3e      	ldr	r2, [pc, #248]	@ (8000c9c <HAL_RCC_OscConfig+0x294>)
 8000ba2:	6813      	ldr	r3, [r2, #0]
 8000ba4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ba8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000baa:	f7ff fcf3 	bl	8000594 <HAL_GetTick>
 8000bae:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8000bb0:	4b3a      	ldr	r3, [pc, #232]	@ (8000c9c <HAL_RCC_OscConfig+0x294>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8000bb8:	d153      	bne.n	8000c62 <HAL_RCC_OscConfig+0x25a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8000bba:	f7ff fceb 	bl	8000594 <HAL_GetTick>
 8000bbe:	1b40      	subs	r0, r0, r5
 8000bc0:	2802      	cmp	r0, #2
 8000bc2:	d9f5      	bls.n	8000bb0 <HAL_RCC_OscConfig+0x1a8>
          {
            return HAL_TIMEOUT;
 8000bc4:	2003      	movs	r0, #3
 8000bc6:	e200      	b.n	8000fca <HAL_RCC_OscConfig+0x5c2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bc8:	4a34      	ldr	r2, [pc, #208]	@ (8000c9c <HAL_RCC_OscConfig+0x294>)
 8000bca:	6853      	ldr	r3, [r2, #4]
 8000bcc:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8000bd0:	6921      	ldr	r1, [r4, #16]
 8000bd2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8000bd6:	6053      	str	r3, [r2, #4]
 8000bd8:	e7d2      	b.n	8000b80 <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_DISABLE();
 8000bda:	4a30      	ldr	r2, [pc, #192]	@ (8000c9c <HAL_RCC_OscConfig+0x294>)
 8000bdc:	6813      	ldr	r3, [r2, #0]
 8000bde:	f023 0301 	bic.w	r3, r3, #1
 8000be2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000be4:	f7ff fcd6 	bl	8000594 <HAL_GetTick>
 8000be8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000bea:	4b2c      	ldr	r3, [pc, #176]	@ (8000c9c <HAL_RCC_OscConfig+0x294>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f013 0f04 	tst.w	r3, #4
 8000bf2:	d0c5      	beq.n	8000b80 <HAL_RCC_OscConfig+0x178>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bf4:	f7ff fcce 	bl	8000594 <HAL_GetTick>
 8000bf8:	1b40      	subs	r0, r0, r5
 8000bfa:	2802      	cmp	r0, #2
 8000bfc:	d9f5      	bls.n	8000bea <HAL_RCC_OscConfig+0x1e2>
            return HAL_TIMEOUT;
 8000bfe:	2003      	movs	r0, #3
 8000c00:	e1e3      	b.n	8000fca <HAL_RCC_OscConfig+0x5c2>
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8000c02:	f002 0203 	and.w	r2, r2, #3
 8000c06:	2a01      	cmp	r2, #1
 8000c08:	d1c7      	bne.n	8000b9a <HAL_RCC_OscConfig+0x192>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000c0a:	4b24      	ldr	r3, [pc, #144]	@ (8000c9c <HAL_RCC_OscConfig+0x294>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8000c12:	d003      	beq.n	8000c1c <HAL_RCC_OscConfig+0x214>
 8000c14:	69e3      	ldr	r3, [r4, #28]
 8000c16:	2b80      	cmp	r3, #128	@ 0x80
 8000c18:	f040 81d4 	bne.w	8000fc4 <HAL_RCC_OscConfig+0x5bc>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000c1c:	4a1f      	ldr	r2, [pc, #124]	@ (8000c9c <HAL_RCC_OscConfig+0x294>)
 8000c1e:	68d3      	ldr	r3, [r2, #12]
 8000c20:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8000c24:	6a21      	ldr	r1, [r4, #32]
 8000c26:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8000c2a:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c2c:	6823      	ldr	r3, [r4, #0]
 8000c2e:	f013 0f08 	tst.w	r3, #8
 8000c32:	d049      	beq.n	8000cc8 <HAL_RCC_OscConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000c34:	6963      	ldr	r3, [r4, #20]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d032      	beq.n	8000ca0 <HAL_RCC_OscConfig+0x298>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c3a:	4a18      	ldr	r2, [pc, #96]	@ (8000c9c <HAL_RCC_OscConfig+0x294>)
 8000c3c:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8000c3e:	f043 0301 	orr.w	r3, r3, #1
 8000c42:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000c44:	f7ff fca6 	bl	8000594 <HAL_GetTick>
 8000c48:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000c4a:	4b14      	ldr	r3, [pc, #80]	@ (8000c9c <HAL_RCC_OscConfig+0x294>)
 8000c4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000c4e:	f013 0f02 	tst.w	r3, #2
 8000c52:	d139      	bne.n	8000cc8 <HAL_RCC_OscConfig+0x2c0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c54:	f7ff fc9e 	bl	8000594 <HAL_GetTick>
 8000c58:	1b40      	subs	r0, r0, r5
 8000c5a:	2802      	cmp	r0, #2
 8000c5c:	d9f5      	bls.n	8000c4a <HAL_RCC_OscConfig+0x242>
        {
          return HAL_TIMEOUT;
 8000c5e:	2003      	movs	r0, #3
 8000c60:	e1b3      	b.n	8000fca <HAL_RCC_OscConfig+0x5c2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000c62:	4a0e      	ldr	r2, [pc, #56]	@ (8000c9c <HAL_RCC_OscConfig+0x294>)
 8000c64:	68d3      	ldr	r3, [r2, #12]
 8000c66:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8000c6a:	6a21      	ldr	r1, [r4, #32]
 8000c6c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8000c70:	60d3      	str	r3, [r2, #12]
 8000c72:	e7db      	b.n	8000c2c <HAL_RCC_OscConfig+0x224>
        __HAL_RCC_CSI_DISABLE();
 8000c74:	4a09      	ldr	r2, [pc, #36]	@ (8000c9c <HAL_RCC_OscConfig+0x294>)
 8000c76:	6813      	ldr	r3, [r2, #0]
 8000c78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000c7c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000c7e:	f7ff fc89 	bl	8000594 <HAL_GetTick>
 8000c82:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8000c84:	4b05      	ldr	r3, [pc, #20]	@ (8000c9c <HAL_RCC_OscConfig+0x294>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8000c8c:	d0ce      	beq.n	8000c2c <HAL_RCC_OscConfig+0x224>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8000c8e:	f7ff fc81 	bl	8000594 <HAL_GetTick>
 8000c92:	1b40      	subs	r0, r0, r5
 8000c94:	2802      	cmp	r0, #2
 8000c96:	d9f5      	bls.n	8000c84 <HAL_RCC_OscConfig+0x27c>
            return HAL_TIMEOUT;
 8000c98:	2003      	movs	r0, #3
 8000c9a:	e196      	b.n	8000fca <HAL_RCC_OscConfig+0x5c2>
 8000c9c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ca0:	4a9d      	ldr	r2, [pc, #628]	@ (8000f18 <HAL_RCC_OscConfig+0x510>)
 8000ca2:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8000ca4:	f023 0301 	bic.w	r3, r3, #1
 8000ca8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000caa:	f7ff fc73 	bl	8000594 <HAL_GetTick>
 8000cae:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000cb0:	4b99      	ldr	r3, [pc, #612]	@ (8000f18 <HAL_RCC_OscConfig+0x510>)
 8000cb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000cb4:	f013 0f02 	tst.w	r3, #2
 8000cb8:	d006      	beq.n	8000cc8 <HAL_RCC_OscConfig+0x2c0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000cba:	f7ff fc6b 	bl	8000594 <HAL_GetTick>
 8000cbe:	1b40      	subs	r0, r0, r5
 8000cc0:	2802      	cmp	r0, #2
 8000cc2:	d9f5      	bls.n	8000cb0 <HAL_RCC_OscConfig+0x2a8>
        {
          return HAL_TIMEOUT;
 8000cc4:	2003      	movs	r0, #3
 8000cc6:	e180      	b.n	8000fca <HAL_RCC_OscConfig+0x5c2>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000cc8:	6823      	ldr	r3, [r4, #0]
 8000cca:	f013 0f20 	tst.w	r3, #32
 8000cce:	d029      	beq.n	8000d24 <HAL_RCC_OscConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8000cd0:	69a3      	ldr	r3, [r4, #24]
 8000cd2:	b19b      	cbz	r3, 8000cfc <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000cd4:	4a90      	ldr	r2, [pc, #576]	@ (8000f18 <HAL_RCC_OscConfig+0x510>)
 8000cd6:	6813      	ldr	r3, [r2, #0]
 8000cd8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000cdc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8000cde:	f7ff fc59 	bl	8000594 <HAL_GetTick>
 8000ce2:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8000ce4:	4b8c      	ldr	r3, [pc, #560]	@ (8000f18 <HAL_RCC_OscConfig+0x510>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8000cec:	d11a      	bne.n	8000d24 <HAL_RCC_OscConfig+0x31c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000cee:	f7ff fc51 	bl	8000594 <HAL_GetTick>
 8000cf2:	1b40      	subs	r0, r0, r5
 8000cf4:	2802      	cmp	r0, #2
 8000cf6:	d9f5      	bls.n	8000ce4 <HAL_RCC_OscConfig+0x2dc>
        {
          return HAL_TIMEOUT;
 8000cf8:	2003      	movs	r0, #3
 8000cfa:	e166      	b.n	8000fca <HAL_RCC_OscConfig+0x5c2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8000cfc:	4a86      	ldr	r2, [pc, #536]	@ (8000f18 <HAL_RCC_OscConfig+0x510>)
 8000cfe:	6813      	ldr	r3, [r2, #0]
 8000d00:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000d04:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8000d06:	f7ff fc45 	bl	8000594 <HAL_GetTick>
 8000d0a:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000d0c:	4b82      	ldr	r3, [pc, #520]	@ (8000f18 <HAL_RCC_OscConfig+0x510>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8000d14:	d006      	beq.n	8000d24 <HAL_RCC_OscConfig+0x31c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000d16:	f7ff fc3d 	bl	8000594 <HAL_GetTick>
 8000d1a:	1b40      	subs	r0, r0, r5
 8000d1c:	2802      	cmp	r0, #2
 8000d1e:	d9f5      	bls.n	8000d0c <HAL_RCC_OscConfig+0x304>
        {
          return HAL_TIMEOUT;
 8000d20:	2003      	movs	r0, #3
 8000d22:	e152      	b.n	8000fca <HAL_RCC_OscConfig+0x5c2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d24:	6823      	ldr	r3, [r4, #0]
 8000d26:	f013 0f04 	tst.w	r3, #4
 8000d2a:	d121      	bne.n	8000d70 <HAL_RCC_OscConfig+0x368>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d2c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f000 814a 	beq.w	8000fc8 <HAL_RCC_OscConfig+0x5c0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8000d34:	4a78      	ldr	r2, [pc, #480]	@ (8000f18 <HAL_RCC_OscConfig+0x510>)
 8000d36:	6912      	ldr	r2, [r2, #16]
 8000d38:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8000d3c:	2a18      	cmp	r2, #24
 8000d3e:	f000 80f1 	beq.w	8000f24 <HAL_RCC_OscConfig+0x51c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d075      	beq.n	8000e32 <HAL_RCC_OscConfig+0x42a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d46:	4a74      	ldr	r2, [pc, #464]	@ (8000f18 <HAL_RCC_OscConfig+0x510>)
 8000d48:	6813      	ldr	r3, [r2, #0]
 8000d4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000d4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d50:	f7ff fc20 	bl	8000594 <HAL_GetTick>
 8000d54:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000d56:	4b70      	ldr	r3, [pc, #448]	@ (8000f18 <HAL_RCC_OscConfig+0x510>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8000d5e:	f000 80d8 	beq.w	8000f12 <HAL_RCC_OscConfig+0x50a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000d62:	f7ff fc17 	bl	8000594 <HAL_GetTick>
 8000d66:	1b00      	subs	r0, r0, r4
 8000d68:	2802      	cmp	r0, #2
 8000d6a:	d9f4      	bls.n	8000d56 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8000d6c:	2003      	movs	r0, #3
 8000d6e:	e12c      	b.n	8000fca <HAL_RCC_OscConfig+0x5c2>
    PWR->CR1 |= PWR_CR1_DBP;
 8000d70:	4a6a      	ldr	r2, [pc, #424]	@ (8000f1c <HAL_RCC_OscConfig+0x514>)
 8000d72:	6813      	ldr	r3, [r2, #0]
 8000d74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d78:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8000d7a:	f7ff fc0b 	bl	8000594 <HAL_GetTick>
 8000d7e:	4605      	mov	r5, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8000d80:	4b66      	ldr	r3, [pc, #408]	@ (8000f1c <HAL_RCC_OscConfig+0x514>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8000d88:	d106      	bne.n	8000d98 <HAL_RCC_OscConfig+0x390>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d8a:	f7ff fc03 	bl	8000594 <HAL_GetTick>
 8000d8e:	1b40      	subs	r0, r0, r5
 8000d90:	2864      	cmp	r0, #100	@ 0x64
 8000d92:	d9f5      	bls.n	8000d80 <HAL_RCC_OscConfig+0x378>
        return HAL_TIMEOUT;
 8000d94:	2003      	movs	r0, #3
 8000d96:	e118      	b.n	8000fca <HAL_RCC_OscConfig+0x5c2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d98:	68a3      	ldr	r3, [r4, #8]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d00a      	beq.n	8000db4 <HAL_RCC_OscConfig+0x3ac>
 8000d9e:	bb0b      	cbnz	r3, 8000de4 <HAL_RCC_OscConfig+0x3dc>
 8000da0:	4b5d      	ldr	r3, [pc, #372]	@ (8000f18 <HAL_RCC_OscConfig+0x510>)
 8000da2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000da4:	f022 0201 	bic.w	r2, r2, #1
 8000da8:	671a      	str	r2, [r3, #112]	@ 0x70
 8000daa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000dac:	f022 0204 	bic.w	r2, r2, #4
 8000db0:	671a      	str	r2, [r3, #112]	@ 0x70
 8000db2:	e004      	b.n	8000dbe <HAL_RCC_OscConfig+0x3b6>
 8000db4:	4a58      	ldr	r2, [pc, #352]	@ (8000f18 <HAL_RCC_OscConfig+0x510>)
 8000db6:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	6713      	str	r3, [r2, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000dbe:	68a3      	ldr	r3, [r4, #8]
 8000dc0:	b333      	cbz	r3, 8000e10 <HAL_RCC_OscConfig+0x408>
      tickstart = HAL_GetTick();
 8000dc2:	f7ff fbe7 	bl	8000594 <HAL_GetTick>
 8000dc6:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000dc8:	4b53      	ldr	r3, [pc, #332]	@ (8000f18 <HAL_RCC_OscConfig+0x510>)
 8000dca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000dcc:	f013 0f02 	tst.w	r3, #2
 8000dd0:	d1ac      	bne.n	8000d2c <HAL_RCC_OscConfig+0x324>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000dd2:	f7ff fbdf 	bl	8000594 <HAL_GetTick>
 8000dd6:	1b40      	subs	r0, r0, r5
 8000dd8:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	d9f3      	bls.n	8000dc8 <HAL_RCC_OscConfig+0x3c0>
          return HAL_TIMEOUT;
 8000de0:	2003      	movs	r0, #3
 8000de2:	e0f2      	b.n	8000fca <HAL_RCC_OscConfig+0x5c2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000de4:	2b05      	cmp	r3, #5
 8000de6:	d009      	beq.n	8000dfc <HAL_RCC_OscConfig+0x3f4>
 8000de8:	4b4b      	ldr	r3, [pc, #300]	@ (8000f18 <HAL_RCC_OscConfig+0x510>)
 8000dea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000dec:	f022 0201 	bic.w	r2, r2, #1
 8000df0:	671a      	str	r2, [r3, #112]	@ 0x70
 8000df2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000df4:	f022 0204 	bic.w	r2, r2, #4
 8000df8:	671a      	str	r2, [r3, #112]	@ 0x70
 8000dfa:	e7e0      	b.n	8000dbe <HAL_RCC_OscConfig+0x3b6>
 8000dfc:	4b46      	ldr	r3, [pc, #280]	@ (8000f18 <HAL_RCC_OscConfig+0x510>)
 8000dfe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000e00:	f042 0204 	orr.w	r2, r2, #4
 8000e04:	671a      	str	r2, [r3, #112]	@ 0x70
 8000e06:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000e08:	f042 0201 	orr.w	r2, r2, #1
 8000e0c:	671a      	str	r2, [r3, #112]	@ 0x70
 8000e0e:	e7d6      	b.n	8000dbe <HAL_RCC_OscConfig+0x3b6>
      tickstart = HAL_GetTick();
 8000e10:	f7ff fbc0 	bl	8000594 <HAL_GetTick>
 8000e14:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000e16:	4b40      	ldr	r3, [pc, #256]	@ (8000f18 <HAL_RCC_OscConfig+0x510>)
 8000e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e1a:	f013 0f02 	tst.w	r3, #2
 8000e1e:	d085      	beq.n	8000d2c <HAL_RCC_OscConfig+0x324>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e20:	f7ff fbb8 	bl	8000594 <HAL_GetTick>
 8000e24:	1b40      	subs	r0, r0, r5
 8000e26:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d9f3      	bls.n	8000e16 <HAL_RCC_OscConfig+0x40e>
          return HAL_TIMEOUT;
 8000e2e:	2003      	movs	r0, #3
 8000e30:	e0cb      	b.n	8000fca <HAL_RCC_OscConfig+0x5c2>
        __HAL_RCC_PLL_DISABLE();
 8000e32:	4a39      	ldr	r2, [pc, #228]	@ (8000f18 <HAL_RCC_OscConfig+0x510>)
 8000e34:	6813      	ldr	r3, [r2, #0]
 8000e36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000e3a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000e3c:	f7ff fbaa 	bl	8000594 <HAL_GetTick>
 8000e40:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000e42:	4b35      	ldr	r3, [pc, #212]	@ (8000f18 <HAL_RCC_OscConfig+0x510>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8000e4a:	d006      	beq.n	8000e5a <HAL_RCC_OscConfig+0x452>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e4c:	f7ff fba2 	bl	8000594 <HAL_GetTick>
 8000e50:	1b40      	subs	r0, r0, r5
 8000e52:	2802      	cmp	r0, #2
 8000e54:	d9f5      	bls.n	8000e42 <HAL_RCC_OscConfig+0x43a>
            return HAL_TIMEOUT;
 8000e56:	2003      	movs	r0, #3
 8000e58:	e0b7      	b.n	8000fca <HAL_RCC_OscConfig+0x5c2>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e5a:	4b2f      	ldr	r3, [pc, #188]	@ (8000f18 <HAL_RCC_OscConfig+0x510>)
 8000e5c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8000e5e:	4a30      	ldr	r2, [pc, #192]	@ (8000f20 <HAL_RCC_OscConfig+0x518>)
 8000e60:	400a      	ands	r2, r1
 8000e62:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000e64:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8000e66:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8000e6a:	430a      	orrs	r2, r1
 8000e6c:	629a      	str	r2, [r3, #40]	@ 0x28
 8000e6e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8000e70:	3a01      	subs	r2, #1
 8000e72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000e76:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000e78:	3901      	subs	r1, #1
 8000e7a:	0249      	lsls	r1, r1, #9
 8000e7c:	b289      	uxth	r1, r1
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8000e82:	3901      	subs	r1, #1
 8000e84:	0409      	lsls	r1, r1, #16
 8000e86:	f401 01fe 	and.w	r1, r1, #8323072	@ 0x7f0000
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8000e8e:	3901      	subs	r1, #1
 8000e90:	0609      	lsls	r1, r1, #24
 8000e92:	f001 41fe 	and.w	r1, r1, #2130706432	@ 0x7f000000
 8000e96:	430a      	orrs	r2, r1
 8000e98:	631a      	str	r2, [r3, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8000e9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e9c:	f022 0201 	bic.w	r2, r2, #1
 8000ea0:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8000ea2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ea4:	f36f 02cf 	bfc	r2, #3, #13
 8000ea8:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8000eaa:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000eae:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8000eb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000eb2:	f022 020c 	bic.w	r2, r2, #12
 8000eb6:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8000eb8:	430a      	orrs	r2, r1
 8000eba:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8000ebc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ebe:	f022 0202 	bic.w	r2, r2, #2
 8000ec2:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8000ec4:	430a      	orrs	r2, r1
 8000ec6:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8000ec8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000eca:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000ece:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8000ed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ed2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000ed6:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8000ed8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000eda:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8000ede:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8000ee0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ee2:	f042 0201 	orr.w	r2, r2, #1
 8000ee6:	62da      	str	r2, [r3, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8000eee:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ef0:	f7ff fb50 	bl	8000594 <HAL_GetTick>
 8000ef4:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000ef6:	4b08      	ldr	r3, [pc, #32]	@ (8000f18 <HAL_RCC_OscConfig+0x510>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8000efe:	d106      	bne.n	8000f0e <HAL_RCC_OscConfig+0x506>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f00:	f7ff fb48 	bl	8000594 <HAL_GetTick>
 8000f04:	1b00      	subs	r0, r0, r4
 8000f06:	2802      	cmp	r0, #2
 8000f08:	d9f5      	bls.n	8000ef6 <HAL_RCC_OscConfig+0x4ee>
            return HAL_TIMEOUT;
 8000f0a:	2003      	movs	r0, #3
 8000f0c:	e05d      	b.n	8000fca <HAL_RCC_OscConfig+0x5c2>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 8000f0e:	2000      	movs	r0, #0
 8000f10:	e05b      	b.n	8000fca <HAL_RCC_OscConfig+0x5c2>
 8000f12:	2000      	movs	r0, #0
 8000f14:	e059      	b.n	8000fca <HAL_RCC_OscConfig+0x5c2>
 8000f16:	bf00      	nop
 8000f18:	58024400 	.word	0x58024400
 8000f1c:	58024800 	.word	0x58024800
 8000f20:	fffffc0c 	.word	0xfffffc0c
      temp1_pllckcfg = RCC->PLLCKSELR;
 8000f24:	4930      	ldr	r1, [pc, #192]	@ (8000fe8 <HAL_RCC_OscConfig+0x5e0>)
 8000f26:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8000f28:	6b08      	ldr	r0, [r1, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d04e      	beq.n	8000fcc <HAL_RCC_OscConfig+0x5c4>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f2e:	f002 0303 	and.w	r3, r2, #3
 8000f32:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000f34:	428b      	cmp	r3, r1
 8000f36:	d14b      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x5c8>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8000f38:	f3c2 1205 	ubfx	r2, r2, #4, #6
 8000f3c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d148      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x5cc>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8000f42:	f3c0 0208 	ubfx	r2, r0, #0, #9
 8000f46:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8000f48:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d144      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x5d0>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8000f4e:	f3c0 2246 	ubfx	r2, r0, #9, #7
 8000f52:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000f54:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d140      	bne.n	8000fdc <HAL_RCC_OscConfig+0x5d4>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8000f5a:	f3c0 4206 	ubfx	r2, r0, #16, #7
 8000f5e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8000f60:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d13c      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x5d8>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8000f66:	f3c0 6006 	ubfx	r0, r0, #24, #7
 8000f6a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8000f6c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8000f6e:	4298      	cmp	r0, r3
 8000f70:	d138      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x5dc>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8000f72:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe8 <HAL_RCC_OscConfig+0x5e0>)
 8000f74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f76:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8000f7a:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d101      	bne.n	8000f84 <HAL_RCC_OscConfig+0x57c>
  return HAL_OK;
 8000f80:	2000      	movs	r0, #0
 8000f82:	e022      	b.n	8000fca <HAL_RCC_OscConfig+0x5c2>
          __HAL_RCC_PLLFRACN_DISABLE();
 8000f84:	4a18      	ldr	r2, [pc, #96]	@ (8000fe8 <HAL_RCC_OscConfig+0x5e0>)
 8000f86:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8000f88:	f023 0301 	bic.w	r3, r3, #1
 8000f8c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 8000f8e:	f7ff fb01 	bl	8000594 <HAL_GetTick>
 8000f92:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8000f94:	f7ff fafe 	bl	8000594 <HAL_GetTick>
 8000f98:	42a8      	cmp	r0, r5
 8000f9a:	d0fb      	beq.n	8000f94 <HAL_RCC_OscConfig+0x58c>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8000f9c:	4a12      	ldr	r2, [pc, #72]	@ (8000fe8 <HAL_RCC_OscConfig+0x5e0>)
 8000f9e:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8000fa0:	f36f 03cf 	bfc	r3, #3, #13
 8000fa4:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8000fa6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000faa:	6353      	str	r3, [r2, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8000fac:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8000fae:	f043 0301 	orr.w	r3, r3, #1
 8000fb2:	62d3      	str	r3, [r2, #44]	@ 0x2c
  return HAL_OK;
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	e008      	b.n	8000fca <HAL_RCC_OscConfig+0x5c2>
    return HAL_ERROR;
 8000fb8:	2001      	movs	r0, #1
}
 8000fba:	4770      	bx	lr
        return HAL_ERROR;
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	e004      	b.n	8000fca <HAL_RCC_OscConfig+0x5c2>
        return HAL_ERROR;
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	e002      	b.n	8000fca <HAL_RCC_OscConfig+0x5c2>
        return HAL_ERROR;
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	e000      	b.n	8000fca <HAL_RCC_OscConfig+0x5c2>
  return HAL_OK;
 8000fc8:	2000      	movs	r0, #0
}
 8000fca:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 8000fcc:	2001      	movs	r0, #1
 8000fce:	e7fc      	b.n	8000fca <HAL_RCC_OscConfig+0x5c2>
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	e7fa      	b.n	8000fca <HAL_RCC_OscConfig+0x5c2>
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	e7f8      	b.n	8000fca <HAL_RCC_OscConfig+0x5c2>
 8000fd8:	2001      	movs	r0, #1
 8000fda:	e7f6      	b.n	8000fca <HAL_RCC_OscConfig+0x5c2>
 8000fdc:	2001      	movs	r0, #1
 8000fde:	e7f4      	b.n	8000fca <HAL_RCC_OscConfig+0x5c2>
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	e7f2      	b.n	8000fca <HAL_RCC_OscConfig+0x5c2>
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	e7f0      	b.n	8000fca <HAL_RCC_OscConfig+0x5c2>
 8000fe8:	58024400 	.word	0x58024400

08000fec <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000fec:	4b75      	ldr	r3, [pc, #468]	@ (80011c4 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8000fee:	691b      	ldr	r3, [r3, #16]
 8000ff0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8000ff4:	2b10      	cmp	r3, #16
 8000ff6:	f000 80de 	beq.w	80011b6 <HAL_RCC_GetSysClockFreq+0x1ca>
 8000ffa:	2b18      	cmp	r3, #24
 8000ffc:	d00f      	beq.n	800101e <HAL_RCC_GetSysClockFreq+0x32>
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	f040 80db 	bne.w	80011ba <HAL_RCC_GetSysClockFreq+0x1ce>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001004:	4b6f      	ldr	r3, [pc, #444]	@ (80011c4 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f013 0f20 	tst.w	r3, #32
 800100c:	f000 80d7 	beq.w	80011be <HAL_RCC_GetSysClockFreq+0x1d2>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001010:	4b6c      	ldr	r3, [pc, #432]	@ (80011c4 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8001018:	486b      	ldr	r0, [pc, #428]	@ (80011c8 <HAL_RCC_GetSysClockFreq+0x1dc>)
 800101a:	40d8      	lsrs	r0, r3
 800101c:	4770      	bx	lr
{
 800101e:	b410      	push	{r4}
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001020:	4b68      	ldr	r3, [pc, #416]	@ (80011c4 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8001022:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001024:	f002 0203 	and.w	r2, r2, #3
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001028:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800102a:	f3c4 1005 	ubfx	r0, r4, #4, #6
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800102e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001030:	f001 0101 	and.w	r1, r1, #1
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001034:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001036:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 800103a:	fb01 f303 	mul.w	r3, r1, r3
 800103e:	ee07 3a90 	vmov	s15, r3
 8001042:	eef8 7a67 	vcvt.f32.u32	s15, s15

      if (pllm != 0U)
 8001046:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
 800104a:	d077      	beq.n	800113c <HAL_RCC_GetSysClockFreq+0x150>
      {
        switch (pllsource)
 800104c:	2a01      	cmp	r2, #1
 800104e:	d04a      	beq.n	80010e6 <HAL_RCC_GetSysClockFreq+0xfa>
 8001050:	2a02      	cmp	r2, #2
 8001052:	d076      	beq.n	8001142 <HAL_RCC_GetSysClockFreq+0x156>
 8001054:	2a00      	cmp	r2, #0
 8001056:	f040 8091 	bne.w	800117c <HAL_RCC_GetSysClockFreq+0x190>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800105a:	4b5a      	ldr	r3, [pc, #360]	@ (80011c4 <HAL_RCC_GetSysClockFreq+0x1d8>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f013 0f20 	tst.w	r3, #32
 8001062:	d023      	beq.n	80010ac <HAL_RCC_GetSysClockFreq+0xc0>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001064:	4957      	ldr	r1, [pc, #348]	@ (80011c4 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8001066:	680a      	ldr	r2, [r1, #0]
 8001068:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800106c:	4b56      	ldr	r3, [pc, #344]	@ (80011c8 <HAL_RCC_GetSysClockFreq+0x1dc>)
 800106e:	40d3      	lsrs	r3, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001070:	ee07 3a10 	vmov	s14, r3
 8001074:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8001078:	ee07 0a10 	vmov	s14, r0
 800107c:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8001080:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8001084:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 8001086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800108a:	ee06 3a90 	vmov	s13, r3
 800108e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8001092:	ed9f 6a4e 	vldr	s12, [pc, #312]	@ 80011cc <HAL_RCC_GetSysClockFreq+0x1e0>
 8001096:	ee67 7a86 	vmul.f32	s15, s15, s12
 800109a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800109e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80010a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80010a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010aa:	e038      	b.n	800111e <HAL_RCC_GetSysClockFreq+0x132>
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80010ac:	ee07 0a10 	vmov	s14, r0
 80010b0:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80010b4:	ed9f 6a46 	vldr	s12, [pc, #280]	@ 80011d0 <HAL_RCC_GetSysClockFreq+0x1e4>
 80010b8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80010bc:	4b41      	ldr	r3, [pc, #260]	@ (80011c4 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80010be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80010c4:	ee06 3a90 	vmov	s13, r3
 80010c8:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80010cc:	ed9f 6a3f 	vldr	s12, [pc, #252]	@ 80011cc <HAL_RCC_GetSysClockFreq+0x1e0>
 80010d0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80010d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80010d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80010dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80010e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010e4:	e01b      	b.n	800111e <HAL_RCC_GetSysClockFreq+0x132>
            }
            break;

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80010e6:	ee07 0a10 	vmov	s14, r0
 80010ea:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80010ee:	ed9f 6a39 	vldr	s12, [pc, #228]	@ 80011d4 <HAL_RCC_GetSysClockFreq+0x1e8>
 80010f2:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80010f6:	4b33      	ldr	r3, [pc, #204]	@ (80011c4 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80010fe:	ee06 3a90 	vmov	s13, r3
 8001102:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8001106:	ed9f 6a31 	vldr	s12, [pc, #196]	@ 80011cc <HAL_RCC_GetSysClockFreq+0x1e0>
 800110a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800110e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001112:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800111a:	ee27 7a27 	vmul.f32	s14, s14, s15

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800111e:	4b29      	ldr	r3, [pc, #164]	@ (80011c4 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8001126:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001128:	ee07 3a90 	vmov	s15, r3
 800112c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001130:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001134:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8001138:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 800113c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001140:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001142:	ee07 0a10 	vmov	s14, r0
 8001146:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800114a:	ed9f 6a23 	vldr	s12, [pc, #140]	@ 80011d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 800114e:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8001152:	4b1c      	ldr	r3, [pc, #112]	@ (80011c4 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800115a:	ee06 3a90 	vmov	s13, r3
 800115e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8001162:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 80011cc <HAL_RCC_GetSysClockFreq+0x1e0>
 8001166:	ee67 7a86 	vmul.f32	s15, s15, s12
 800116a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800116e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001176:	ee27 7a27 	vmul.f32	s14, s14, s15
            break;
 800117a:	e7d0      	b.n	800111e <HAL_RCC_GetSysClockFreq+0x132>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800117c:	ee07 0a10 	vmov	s14, r0
 8001180:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8001184:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80011d4 <HAL_RCC_GetSysClockFreq+0x1e8>
 8001188:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800118c:	4b0d      	ldr	r3, [pc, #52]	@ (80011c4 <HAL_RCC_GetSysClockFreq+0x1d8>)
 800118e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001190:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001194:	ee06 3a90 	vmov	s13, r3
 8001198:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800119c:	ed9f 6a0b 	vldr	s12, [pc, #44]	@ 80011cc <HAL_RCC_GetSysClockFreq+0x1e0>
 80011a0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80011a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80011a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80011ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80011b0:	ee27 7a27 	vmul.f32	s14, s14, s15
            break;
 80011b4:	e7b3      	b.n	800111e <HAL_RCC_GetSysClockFreq+0x132>
      sysclockfreq = HSE_VALUE;
 80011b6:	4809      	ldr	r0, [pc, #36]	@ (80011dc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80011b8:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011ba:	4809      	ldr	r0, [pc, #36]	@ (80011e0 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80011bc:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 80011be:	4802      	ldr	r0, [pc, #8]	@ (80011c8 <HAL_RCC_GetSysClockFreq+0x1dc>)
}
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	58024400 	.word	0x58024400
 80011c8:	03d09000 	.word	0x03d09000
 80011cc:	39000000 	.word	0x39000000
 80011d0:	4c742400 	.word	0x4c742400
 80011d4:	4a742400 	.word	0x4a742400
 80011d8:	4af42400 	.word	0x4af42400
 80011dc:	007a1200 	.word	0x007a1200
 80011e0:	003d0900 	.word	0x003d0900

080011e4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80011e4:	2800      	cmp	r0, #0
 80011e6:	f000 8132 	beq.w	800144e <HAL_RCC_ClockConfig+0x26a>
{
 80011ea:	b570      	push	{r4, r5, r6, lr}
 80011ec:	460d      	mov	r5, r1
 80011ee:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011f0:	4b9b      	ldr	r3, [pc, #620]	@ (8001460 <HAL_RCC_ClockConfig+0x27c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 030f 	and.w	r3, r3, #15
 80011f8:	428b      	cmp	r3, r1
 80011fa:	d20b      	bcs.n	8001214 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011fc:	4a98      	ldr	r2, [pc, #608]	@ (8001460 <HAL_RCC_ClockConfig+0x27c>)
 80011fe:	6813      	ldr	r3, [r2, #0]
 8001200:	f023 030f 	bic.w	r3, r3, #15
 8001204:	430b      	orrs	r3, r1
 8001206:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001208:	6813      	ldr	r3, [r2, #0]
 800120a:	f003 030f 	and.w	r3, r3, #15
 800120e:	428b      	cmp	r3, r1
 8001210:	f040 811f 	bne.w	8001452 <HAL_RCC_ClockConfig+0x26e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001214:	6823      	ldr	r3, [r4, #0]
 8001216:	f013 0f04 	tst.w	r3, #4
 800121a:	d00c      	beq.n	8001236 <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800121c:	6922      	ldr	r2, [r4, #16]
 800121e:	4b91      	ldr	r3, [pc, #580]	@ (8001464 <HAL_RCC_ClockConfig+0x280>)
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001226:	429a      	cmp	r2, r3
 8001228:	d905      	bls.n	8001236 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800122a:	498e      	ldr	r1, [pc, #568]	@ (8001464 <HAL_RCC_ClockConfig+0x280>)
 800122c:	698b      	ldr	r3, [r1, #24]
 800122e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001232:	431a      	orrs	r2, r3
 8001234:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001236:	6823      	ldr	r3, [r4, #0]
 8001238:	f013 0f08 	tst.w	r3, #8
 800123c:	d00c      	beq.n	8001258 <HAL_RCC_ClockConfig+0x74>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800123e:	6962      	ldr	r2, [r4, #20]
 8001240:	4b88      	ldr	r3, [pc, #544]	@ (8001464 <HAL_RCC_ClockConfig+0x280>)
 8001242:	69db      	ldr	r3, [r3, #28]
 8001244:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001248:	429a      	cmp	r2, r3
 800124a:	d905      	bls.n	8001258 <HAL_RCC_ClockConfig+0x74>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800124c:	4985      	ldr	r1, [pc, #532]	@ (8001464 <HAL_RCC_ClockConfig+0x280>)
 800124e:	69cb      	ldr	r3, [r1, #28]
 8001250:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001254:	431a      	orrs	r2, r3
 8001256:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001258:	6823      	ldr	r3, [r4, #0]
 800125a:	f013 0f10 	tst.w	r3, #16
 800125e:	d00c      	beq.n	800127a <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001260:	69a2      	ldr	r2, [r4, #24]
 8001262:	4b80      	ldr	r3, [pc, #512]	@ (8001464 <HAL_RCC_ClockConfig+0x280>)
 8001264:	69db      	ldr	r3, [r3, #28]
 8001266:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800126a:	429a      	cmp	r2, r3
 800126c:	d905      	bls.n	800127a <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800126e:	497d      	ldr	r1, [pc, #500]	@ (8001464 <HAL_RCC_ClockConfig+0x280>)
 8001270:	69cb      	ldr	r3, [r1, #28]
 8001272:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001276:	431a      	orrs	r2, r3
 8001278:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800127a:	6823      	ldr	r3, [r4, #0]
 800127c:	f013 0f20 	tst.w	r3, #32
 8001280:	d00c      	beq.n	800129c <HAL_RCC_ClockConfig+0xb8>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001282:	69e2      	ldr	r2, [r4, #28]
 8001284:	4b77      	ldr	r3, [pc, #476]	@ (8001464 <HAL_RCC_ClockConfig+0x280>)
 8001286:	6a1b      	ldr	r3, [r3, #32]
 8001288:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800128c:	429a      	cmp	r2, r3
 800128e:	d905      	bls.n	800129c <HAL_RCC_ClockConfig+0xb8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001290:	4974      	ldr	r1, [pc, #464]	@ (8001464 <HAL_RCC_ClockConfig+0x280>)
 8001292:	6a0b      	ldr	r3, [r1, #32]
 8001294:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001298:	431a      	orrs	r2, r3
 800129a:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800129c:	6823      	ldr	r3, [r4, #0]
 800129e:	f013 0f02 	tst.w	r3, #2
 80012a2:	d00c      	beq.n	80012be <HAL_RCC_ClockConfig+0xda>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80012a4:	68e2      	ldr	r2, [r4, #12]
 80012a6:	4b6f      	ldr	r3, [pc, #444]	@ (8001464 <HAL_RCC_ClockConfig+0x280>)
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	f003 030f 	and.w	r3, r3, #15
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d905      	bls.n	80012be <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012b2:	496c      	ldr	r1, [pc, #432]	@ (8001464 <HAL_RCC_ClockConfig+0x280>)
 80012b4:	698b      	ldr	r3, [r1, #24]
 80012b6:	f023 030f 	bic.w	r3, r3, #15
 80012ba:	431a      	orrs	r2, r3
 80012bc:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012be:	6823      	ldr	r3, [r4, #0]
 80012c0:	f013 0f01 	tst.w	r3, #1
 80012c4:	d041      	beq.n	800134a <HAL_RCC_ClockConfig+0x166>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80012c6:	4a67      	ldr	r2, [pc, #412]	@ (8001464 <HAL_RCC_ClockConfig+0x280>)
 80012c8:	6993      	ldr	r3, [r2, #24]
 80012ca:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80012ce:	68a1      	ldr	r1, [r4, #8]
 80012d0:	430b      	orrs	r3, r1
 80012d2:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012d4:	6863      	ldr	r3, [r4, #4]
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d00a      	beq.n	80012f0 <HAL_RCC_ClockConfig+0x10c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012da:	2b03      	cmp	r3, #3
 80012dc:	d027      	beq.n	800132e <HAL_RCC_ClockConfig+0x14a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d02c      	beq.n	800133c <HAL_RCC_ClockConfig+0x158>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012e2:	4a60      	ldr	r2, [pc, #384]	@ (8001464 <HAL_RCC_ClockConfig+0x280>)
 80012e4:	6812      	ldr	r2, [r2, #0]
 80012e6:	f012 0f04 	tst.w	r2, #4
 80012ea:	d106      	bne.n	80012fa <HAL_RCC_ClockConfig+0x116>
        return HAL_ERROR;
 80012ec:	2001      	movs	r0, #1
 80012ee:	e0ad      	b.n	800144c <HAL_RCC_ClockConfig+0x268>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012f0:	6812      	ldr	r2, [r2, #0]
 80012f2:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80012f6:	f000 80ae 	beq.w	8001456 <HAL_RCC_ClockConfig+0x272>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80012fa:	495a      	ldr	r1, [pc, #360]	@ (8001464 <HAL_RCC_ClockConfig+0x280>)
 80012fc:	690a      	ldr	r2, [r1, #16]
 80012fe:	f022 0207 	bic.w	r2, r2, #7
 8001302:	4313      	orrs	r3, r2
 8001304:	610b      	str	r3, [r1, #16]
    tickstart = HAL_GetTick();
 8001306:	f7ff f945 	bl	8000594 <HAL_GetTick>
 800130a:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800130c:	4b55      	ldr	r3, [pc, #340]	@ (8001464 <HAL_RCC_ClockConfig+0x280>)
 800130e:	691b      	ldr	r3, [r3, #16]
 8001310:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001314:	6862      	ldr	r2, [r4, #4]
 8001316:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800131a:	d016      	beq.n	800134a <HAL_RCC_ClockConfig+0x166>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800131c:	f7ff f93a 	bl	8000594 <HAL_GetTick>
 8001320:	1b80      	subs	r0, r0, r6
 8001322:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001326:	4298      	cmp	r0, r3
 8001328:	d9f0      	bls.n	800130c <HAL_RCC_ClockConfig+0x128>
        return HAL_TIMEOUT;
 800132a:	2003      	movs	r0, #3
 800132c:	e08e      	b.n	800144c <HAL_RCC_ClockConfig+0x268>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800132e:	4a4d      	ldr	r2, [pc, #308]	@ (8001464 <HAL_RCC_ClockConfig+0x280>)
 8001330:	6812      	ldr	r2, [r2, #0]
 8001332:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8001336:	d1e0      	bne.n	80012fa <HAL_RCC_ClockConfig+0x116>
        return HAL_ERROR;
 8001338:	2001      	movs	r0, #1
 800133a:	e087      	b.n	800144c <HAL_RCC_ClockConfig+0x268>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800133c:	4a49      	ldr	r2, [pc, #292]	@ (8001464 <HAL_RCC_ClockConfig+0x280>)
 800133e:	6812      	ldr	r2, [r2, #0]
 8001340:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8001344:	d1d9      	bne.n	80012fa <HAL_RCC_ClockConfig+0x116>
        return HAL_ERROR;
 8001346:	2001      	movs	r0, #1
 8001348:	e080      	b.n	800144c <HAL_RCC_ClockConfig+0x268>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800134a:	6823      	ldr	r3, [r4, #0]
 800134c:	f013 0f02 	tst.w	r3, #2
 8001350:	d00c      	beq.n	800136c <HAL_RCC_ClockConfig+0x188>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001352:	68e2      	ldr	r2, [r4, #12]
 8001354:	4b43      	ldr	r3, [pc, #268]	@ (8001464 <HAL_RCC_ClockConfig+0x280>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	f003 030f 	and.w	r3, r3, #15
 800135c:	429a      	cmp	r2, r3
 800135e:	d205      	bcs.n	800136c <HAL_RCC_ClockConfig+0x188>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001360:	4940      	ldr	r1, [pc, #256]	@ (8001464 <HAL_RCC_ClockConfig+0x280>)
 8001362:	698b      	ldr	r3, [r1, #24]
 8001364:	f023 030f 	bic.w	r3, r3, #15
 8001368:	431a      	orrs	r2, r3
 800136a:	618a      	str	r2, [r1, #24]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800136c:	4b3c      	ldr	r3, [pc, #240]	@ (8001460 <HAL_RCC_ClockConfig+0x27c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 030f 	and.w	r3, r3, #15
 8001374:	42ab      	cmp	r3, r5
 8001376:	d90a      	bls.n	800138e <HAL_RCC_ClockConfig+0x1aa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001378:	4a39      	ldr	r2, [pc, #228]	@ (8001460 <HAL_RCC_ClockConfig+0x27c>)
 800137a:	6813      	ldr	r3, [r2, #0]
 800137c:	f023 030f 	bic.w	r3, r3, #15
 8001380:	432b      	orrs	r3, r5
 8001382:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001384:	6813      	ldr	r3, [r2, #0]
 8001386:	f003 030f 	and.w	r3, r3, #15
 800138a:	42ab      	cmp	r3, r5
 800138c:	d165      	bne.n	800145a <HAL_RCC_ClockConfig+0x276>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800138e:	6823      	ldr	r3, [r4, #0]
 8001390:	f013 0f04 	tst.w	r3, #4
 8001394:	d00c      	beq.n	80013b0 <HAL_RCC_ClockConfig+0x1cc>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001396:	6922      	ldr	r2, [r4, #16]
 8001398:	4b32      	ldr	r3, [pc, #200]	@ (8001464 <HAL_RCC_ClockConfig+0x280>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d205      	bcs.n	80013b0 <HAL_RCC_ClockConfig+0x1cc>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80013a4:	492f      	ldr	r1, [pc, #188]	@ (8001464 <HAL_RCC_ClockConfig+0x280>)
 80013a6:	698b      	ldr	r3, [r1, #24]
 80013a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80013ac:	431a      	orrs	r2, r3
 80013ae:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013b0:	6823      	ldr	r3, [r4, #0]
 80013b2:	f013 0f08 	tst.w	r3, #8
 80013b6:	d00c      	beq.n	80013d2 <HAL_RCC_ClockConfig+0x1ee>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80013b8:	6962      	ldr	r2, [r4, #20]
 80013ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001464 <HAL_RCC_ClockConfig+0x280>)
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d205      	bcs.n	80013d2 <HAL_RCC_ClockConfig+0x1ee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80013c6:	4927      	ldr	r1, [pc, #156]	@ (8001464 <HAL_RCC_ClockConfig+0x280>)
 80013c8:	69cb      	ldr	r3, [r1, #28]
 80013ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80013ce:	431a      	orrs	r2, r3
 80013d0:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013d2:	6823      	ldr	r3, [r4, #0]
 80013d4:	f013 0f10 	tst.w	r3, #16
 80013d8:	d00c      	beq.n	80013f4 <HAL_RCC_ClockConfig+0x210>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80013da:	69a2      	ldr	r2, [r4, #24]
 80013dc:	4b21      	ldr	r3, [pc, #132]	@ (8001464 <HAL_RCC_ClockConfig+0x280>)
 80013de:	69db      	ldr	r3, [r3, #28]
 80013e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d205      	bcs.n	80013f4 <HAL_RCC_ClockConfig+0x210>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80013e8:	491e      	ldr	r1, [pc, #120]	@ (8001464 <HAL_RCC_ClockConfig+0x280>)
 80013ea:	69cb      	ldr	r3, [r1, #28]
 80013ec:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80013f0:	431a      	orrs	r2, r3
 80013f2:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80013f4:	6823      	ldr	r3, [r4, #0]
 80013f6:	f013 0f20 	tst.w	r3, #32
 80013fa:	d00c      	beq.n	8001416 <HAL_RCC_ClockConfig+0x232>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80013fc:	69e2      	ldr	r2, [r4, #28]
 80013fe:	4b19      	ldr	r3, [pc, #100]	@ (8001464 <HAL_RCC_ClockConfig+0x280>)
 8001400:	6a1b      	ldr	r3, [r3, #32]
 8001402:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001406:	429a      	cmp	r2, r3
 8001408:	d205      	bcs.n	8001416 <HAL_RCC_ClockConfig+0x232>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800140a:	4916      	ldr	r1, [pc, #88]	@ (8001464 <HAL_RCC_ClockConfig+0x280>)
 800140c:	6a0b      	ldr	r3, [r1, #32]
 800140e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001412:	431a      	orrs	r2, r3
 8001414:	620a      	str	r2, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001416:	f7ff fde9 	bl	8000fec <HAL_RCC_GetSysClockFreq>
 800141a:	4912      	ldr	r1, [pc, #72]	@ (8001464 <HAL_RCC_ClockConfig+0x280>)
 800141c:	698b      	ldr	r3, [r1, #24]
 800141e:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8001422:	4a11      	ldr	r2, [pc, #68]	@ (8001468 <HAL_RCC_ClockConfig+0x284>)
 8001424:	5cd3      	ldrb	r3, [r2, r3]
 8001426:	f003 031f 	and.w	r3, r3, #31
 800142a:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800142c:	698b      	ldr	r3, [r1, #24]
 800142e:	f003 030f 	and.w	r3, r3, #15
 8001432:	5cd3      	ldrb	r3, [r2, r3]
 8001434:	f003 031f 	and.w	r3, r3, #31
 8001438:	fa20 f303 	lsr.w	r3, r0, r3
 800143c:	4a0b      	ldr	r2, [pc, #44]	@ (800146c <HAL_RCC_ClockConfig+0x288>)
 800143e:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8001440:	4b0b      	ldr	r3, [pc, #44]	@ (8001470 <HAL_RCC_ClockConfig+0x28c>)
 8001442:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 8001444:	4b0b      	ldr	r3, [pc, #44]	@ (8001474 <HAL_RCC_ClockConfig+0x290>)
 8001446:	6818      	ldr	r0, [r3, #0]
 8001448:	f7ff f842 	bl	80004d0 <HAL_InitTick>
}
 800144c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800144e:	2001      	movs	r0, #1
}
 8001450:	4770      	bx	lr
      return HAL_ERROR;
 8001452:	2001      	movs	r0, #1
 8001454:	e7fa      	b.n	800144c <HAL_RCC_ClockConfig+0x268>
        return HAL_ERROR;
 8001456:	2001      	movs	r0, #1
 8001458:	e7f8      	b.n	800144c <HAL_RCC_ClockConfig+0x268>
      return HAL_ERROR;
 800145a:	2001      	movs	r0, #1
 800145c:	e7f6      	b.n	800144c <HAL_RCC_ClockConfig+0x268>
 800145e:	bf00      	nop
 8001460:	52002000 	.word	0x52002000
 8001464:	58024400 	.word	0x58024400
 8001468:	08002a18 	.word	0x08002a18
 800146c:	2000000c 	.word	0x2000000c
 8001470:	20000010 	.word	0x20000010
 8001474:	20000004 	.word	0x20000004

08001478 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001478:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800147a:	f7ff fdb7 	bl	8000fec <HAL_RCC_GetSysClockFreq>
 800147e:	4a0b      	ldr	r2, [pc, #44]	@ (80014ac <HAL_RCC_GetHCLKFreq+0x34>)
 8001480:	6993      	ldr	r3, [r2, #24]
 8001482:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8001486:	490a      	ldr	r1, [pc, #40]	@ (80014b0 <HAL_RCC_GetHCLKFreq+0x38>)
 8001488:	5ccb      	ldrb	r3, [r1, r3]
 800148a:	f003 031f 	and.w	r3, r3, #31
 800148e:	fa20 f303 	lsr.w	r3, r0, r3
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001492:	6992      	ldr	r2, [r2, #24]
 8001494:	f002 020f 	and.w	r2, r2, #15
 8001498:	5c88      	ldrb	r0, [r1, r2]
 800149a:	f000 001f 	and.w	r0, r0, #31
 800149e:	fa23 f000 	lsr.w	r0, r3, r0
 80014a2:	4a04      	ldr	r2, [pc, #16]	@ (80014b4 <HAL_RCC_GetHCLKFreq+0x3c>)
 80014a4:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014a6:	4a04      	ldr	r2, [pc, #16]	@ (80014b8 <HAL_RCC_GetHCLKFreq+0x40>)
 80014a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 80014aa:	bd08      	pop	{r3, pc}
 80014ac:	58024400 	.word	0x58024400
 80014b0:	08002a18 	.word	0x08002a18
 80014b4:	2000000c 	.word	0x2000000c
 80014b8:	20000010 	.word	0x20000010

080014bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014bc:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80014be:	f7ff ffdb 	bl	8001478 <HAL_RCC_GetHCLKFreq>
 80014c2:	4b05      	ldr	r3, [pc, #20]	@ (80014d8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80014ca:	4a04      	ldr	r2, [pc, #16]	@ (80014dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80014cc:	5cd3      	ldrb	r3, [r2, r3]
 80014ce:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80014d2:	40d8      	lsrs	r0, r3
 80014d4:	bd08      	pop	{r3, pc}
 80014d6:	bf00      	nop
 80014d8:	58024400 	.word	0x58024400
 80014dc:	08002a18 	.word	0x08002a18

080014e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014e0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80014e2:	f7ff ffc9 	bl	8001478 <HAL_RCC_GetHCLKFreq>
 80014e6:	4b05      	ldr	r3, [pc, #20]	@ (80014fc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80014ee:	4a04      	ldr	r2, [pc, #16]	@ (8001500 <HAL_RCC_GetPCLK2Freq+0x20>)
 80014f0:	5cd3      	ldrb	r3, [r2, r3]
 80014f2:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80014f6:	40d8      	lsrs	r0, r3
 80014f8:	bd08      	pop	{r3, pc}
 80014fa:	bf00      	nop
 80014fc:	58024400 	.word	0x58024400
 8001500:	08002a18 	.word	0x08002a18

08001504 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8001504:	b508      	push	{r3, lr}
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8001506:	f7ff ffb7 	bl	8001478 <HAL_RCC_GetHCLKFreq>
 800150a:	4b05      	ldr	r3, [pc, #20]	@ (8001520 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 800150c:	6a1b      	ldr	r3, [r3, #32]
 800150e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001512:	4a04      	ldr	r2, [pc, #16]	@ (8001524 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8001514:	5cd3      	ldrb	r3, [r2, r3]
 8001516:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800151a:	40d8      	lsrs	r0, r3
 800151c:	bd08      	pop	{r3, pc}
 800151e:	bf00      	nop
 8001520:	58024400 	.word	0x58024400
 8001524:	08002a18 	.word	0x08002a18

08001528 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8001528:	b410      	push	{r4}
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800152a:	4b79      	ldr	r3, [pc, #484]	@ (8001710 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>)
 800152c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800152e:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8001530:	f3c4 3c05 	ubfx	ip, r4, #12, #6
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8001534:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001536:	f3c1 1100 	ubfx	r1, r1, #4, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800153a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800153c:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8001540:	fb01 f303 	mul.w	r3, r1, r3

  if (pll2m != 0U)
 8001544:	f414 3f7c 	tst.w	r4, #258048	@ 0x3f000
 8001548:	f000 80dd 	beq.w	8001706 <HAL_RCCEx_GetPLL2ClockFreq+0x1de>
 800154c:	f002 0203 	and.w	r2, r2, #3
 8001550:	ee07 3a90 	vmov	s15, r3
 8001554:	eef8 7a67 	vcvt.f32.u32	s15, s15
  {
    switch (pllsource)
 8001558:	2a01      	cmp	r2, #1
 800155a:	d04b      	beq.n	80015f4 <HAL_RCCEx_GetPLL2ClockFreq+0xcc>
 800155c:	2a02      	cmp	r2, #2
 800155e:	f000 8098 	beq.w	8001692 <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
 8001562:	2a00      	cmp	r2, #0
 8001564:	f040 80b2 	bne.w	80016cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a4>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001568:	4b69      	ldr	r3, [pc, #420]	@ (8001710 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f013 0f20 	tst.w	r3, #32
 8001570:	d023      	beq.n	80015ba <HAL_RCCEx_GetPLL2ClockFreq+0x92>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001572:	4967      	ldr	r1, [pc, #412]	@ (8001710 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>)
 8001574:	680a      	ldr	r2, [r1, #0]
 8001576:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800157a:	4b66      	ldr	r3, [pc, #408]	@ (8001714 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>)
 800157c:	40d3      	lsrs	r3, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800157e:	ee07 3a10 	vmov	s14, r3
 8001582:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8001586:	ee07 ca10 	vmov	s14, ip
 800158a:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 800158e:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8001592:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 8001594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001598:	ee06 3a90 	vmov	s13, r3
 800159c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80015a0:	ed9f 6a5d 	vldr	s12, [pc, #372]	@ 8001718 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
 80015a4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80015a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80015ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80015b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80015b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015b8:	e038      	b.n	800162c <HAL_RCCEx_GetPLL2ClockFreq+0x104>
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80015ba:	ee07 ca10 	vmov	s14, ip
 80015be:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80015c2:	ed9f 6a56 	vldr	s12, [pc, #344]	@ 800171c <HAL_RCCEx_GetPLL2ClockFreq+0x1f4>
 80015c6:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80015ca:	4b51      	ldr	r3, [pc, #324]	@ (8001710 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>)
 80015cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015d2:	ee06 3a90 	vmov	s13, r3
 80015d6:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80015da:	ed9f 6a4f 	vldr	s12, [pc, #316]	@ 8001718 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
 80015de:	ee67 7a86 	vmul.f32	s15, s15, s12
 80015e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80015e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80015ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80015ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015f2:	e01b      	b.n	800162c <HAL_RCCEx_GetPLL2ClockFreq+0x104>
        }
        break;

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80015f4:	ee07 ca10 	vmov	s14, ip
 80015f8:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80015fc:	ed9f 6a48 	vldr	s12, [pc, #288]	@ 8001720 <HAL_RCCEx_GetPLL2ClockFreq+0x1f8>
 8001600:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8001604:	4b42      	ldr	r3, [pc, #264]	@ (8001710 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>)
 8001606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001608:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800160c:	ee06 3a90 	vmov	s13, r3
 8001610:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8001614:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8001718 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
 8001618:	ee67 7a86 	vmul.f32	s15, s15, s12
 800161c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001620:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001624:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001628:	ee27 7a27 	vmul.f32	s14, s14, s15

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        break;
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800162c:	4a38      	ldr	r2, [pc, #224]	@ (8001710 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>)
 800162e:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8001630:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8001634:	ee07 3a90 	vmov	s15, r3
 8001638:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800163c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001640:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001644:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8001648:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 800164c:	ed80 6a00 	vstr	s12, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8001650:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8001652:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8001656:	ee07 3a90 	vmov	s15, r3
 800165a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800165e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001662:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8001666:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 800166a:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800166e:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8001670:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8001674:	ee07 3a90 	vmov	s15, r3
 8001678:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800167c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001680:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001684:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8001688:	edc0 6a02 	vstr	s13, [r0, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800168c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001690:	4770      	bx	lr
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8001692:	ee07 ca10 	vmov	s14, ip
 8001696:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800169a:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8001724 <HAL_RCCEx_GetPLL2ClockFreq+0x1fc>
 800169e:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80016a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001710 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>)
 80016a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016aa:	ee06 3a90 	vmov	s13, r3
 80016ae:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80016b2:	ed9f 6a19 	vldr	s12, [pc, #100]	@ 8001718 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
 80016b6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80016ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80016be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80016c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80016c6:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 80016ca:	e7af      	b.n	800162c <HAL_RCCEx_GetPLL2ClockFreq+0x104>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80016cc:	ee07 ca10 	vmov	s14, ip
 80016d0:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80016d4:	ed9f 6a12 	vldr	s12, [pc, #72]	@ 8001720 <HAL_RCCEx_GetPLL2ClockFreq+0x1f8>
 80016d8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80016dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001710 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>)
 80016de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016e4:	ee06 3a90 	vmov	s13, r3
 80016e8:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80016ec:	ed9f 6a0a 	vldr	s12, [pc, #40]	@ 8001718 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
 80016f0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80016f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80016f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80016fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001700:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8001704:	e792      	b.n	800162c <HAL_RCCEx_GetPLL2ClockFreq+0x104>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8001706:	2300      	movs	r3, #0
 8001708:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800170a:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800170c:	6083      	str	r3, [r0, #8]
}
 800170e:	e7bd      	b.n	800168c <HAL_RCCEx_GetPLL2ClockFreq+0x164>
 8001710:	58024400 	.word	0x58024400
 8001714:	03d09000 	.word	0x03d09000
 8001718:	39000000 	.word	0x39000000
 800171c:	4c742400 	.word	0x4c742400
 8001720:	4a742400 	.word	0x4a742400
 8001724:	4af42400 	.word	0x4af42400

08001728 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8001728:	b410      	push	{r4}
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800172a:	4b79      	ldr	r3, [pc, #484]	@ (8001910 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>)
 800172c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800172e:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8001730:	f3c4 5c05 	ubfx	ip, r4, #20, #6
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8001734:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001736:	f3c1 2100 	ubfx	r1, r1, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800173a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800173c:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8001740:	fb01 f303 	mul.w	r3, r1, r3

  if (pll3m != 0U)
 8001744:	f014 7f7c 	tst.w	r4, #66060288	@ 0x3f00000
 8001748:	f000 80dd 	beq.w	8001906 <HAL_RCCEx_GetPLL3ClockFreq+0x1de>
 800174c:	f002 0203 	and.w	r2, r2, #3
 8001750:	ee07 3a90 	vmov	s15, r3
 8001754:	eef8 7a67 	vcvt.f32.u32	s15, s15
  {
    switch (pllsource)
 8001758:	2a01      	cmp	r2, #1
 800175a:	d04b      	beq.n	80017f4 <HAL_RCCEx_GetPLL3ClockFreq+0xcc>
 800175c:	2a02      	cmp	r2, #2
 800175e:	f000 8098 	beq.w	8001892 <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
 8001762:	2a00      	cmp	r2, #0
 8001764:	f040 80b2 	bne.w	80018cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a4>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001768:	4b69      	ldr	r3, [pc, #420]	@ (8001910 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f013 0f20 	tst.w	r3, #32
 8001770:	d023      	beq.n	80017ba <HAL_RCCEx_GetPLL3ClockFreq+0x92>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001772:	4967      	ldr	r1, [pc, #412]	@ (8001910 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>)
 8001774:	680a      	ldr	r2, [r1, #0]
 8001776:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800177a:	4b66      	ldr	r3, [pc, #408]	@ (8001914 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>)
 800177c:	40d3      	lsrs	r3, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800177e:	ee07 3a10 	vmov	s14, r3
 8001782:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8001786:	ee07 ca10 	vmov	s14, ip
 800178a:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 800178e:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8001792:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001794:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001798:	ee06 3a90 	vmov	s13, r3
 800179c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80017a0:	ed9f 6a5d 	vldr	s12, [pc, #372]	@ 8001918 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
 80017a4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80017a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80017ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80017b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80017b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017b8:	e038      	b.n	800182c <HAL_RCCEx_GetPLL3ClockFreq+0x104>
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80017ba:	ee07 ca10 	vmov	s14, ip
 80017be:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80017c2:	ed9f 6a56 	vldr	s12, [pc, #344]	@ 800191c <HAL_RCCEx_GetPLL3ClockFreq+0x1f4>
 80017c6:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80017ca:	4b51      	ldr	r3, [pc, #324]	@ (8001910 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017d2:	ee06 3a90 	vmov	s13, r3
 80017d6:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80017da:	ed9f 6a4f 	vldr	s12, [pc, #316]	@ 8001918 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
 80017de:	ee67 7a86 	vmul.f32	s15, s15, s12
 80017e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80017e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80017ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80017ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017f2:	e01b      	b.n	800182c <HAL_RCCEx_GetPLL3ClockFreq+0x104>
        }
        break;
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80017f4:	ee07 ca10 	vmov	s14, ip
 80017f8:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80017fc:	ed9f 6a48 	vldr	s12, [pc, #288]	@ 8001920 <HAL_RCCEx_GetPLL3ClockFreq+0x1f8>
 8001800:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8001804:	4b42      	ldr	r3, [pc, #264]	@ (8001910 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>)
 8001806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800180c:	ee06 3a90 	vmov	s13, r3
 8001810:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8001814:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8001918 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
 8001818:	ee67 7a86 	vmul.f32	s15, s15, s12
 800181c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001820:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001824:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001828:	ee27 7a27 	vmul.f32	s14, s14, s15

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        break;
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800182c:	4a38      	ldr	r2, [pc, #224]	@ (8001910 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>)
 800182e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001830:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8001834:	ee07 3a90 	vmov	s15, r3
 8001838:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800183c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001840:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001844:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8001848:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 800184c:	ed80 6a00 	vstr	s12, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8001850:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001852:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8001856:	ee07 3a90 	vmov	s15, r3
 800185a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800185e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001862:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8001866:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 800186a:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800186e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8001870:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8001874:	ee07 3a90 	vmov	s15, r3
 8001878:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800187c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001880:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001884:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8001888:	edc0 6a02 	vstr	s13, [r0, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800188c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001890:	4770      	bx	lr
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8001892:	ee07 ca10 	vmov	s14, ip
 8001896:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800189a:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8001924 <HAL_RCCEx_GetPLL3ClockFreq+0x1fc>
 800189e:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80018a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001910 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018aa:	ee06 3a90 	vmov	s13, r3
 80018ae:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80018b2:	ed9f 6a19 	vldr	s12, [pc, #100]	@ 8001918 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
 80018b6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80018ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80018be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80018c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80018c6:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 80018ca:	e7af      	b.n	800182c <HAL_RCCEx_GetPLL3ClockFreq+0x104>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80018cc:	ee07 ca10 	vmov	s14, ip
 80018d0:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80018d4:	ed9f 6a12 	vldr	s12, [pc, #72]	@ 8001920 <HAL_RCCEx_GetPLL3ClockFreq+0x1f8>
 80018d8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80018dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001910 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>)
 80018de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018e4:	ee06 3a90 	vmov	s13, r3
 80018e8:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80018ec:	ed9f 6a0a 	vldr	s12, [pc, #40]	@ 8001918 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
 80018f0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80018f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80018f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80018fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001900:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8001904:	e792      	b.n	800182c <HAL_RCCEx_GetPLL3ClockFreq+0x104>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8001906:	2300      	movs	r3, #0
 8001908:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800190a:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800190c:	6083      	str	r3, [r0, #8]
}
 800190e:	e7bd      	b.n	800188c <HAL_RCCEx_GetPLL3ClockFreq+0x164>
 8001910:	58024400 	.word	0x58024400
 8001914:	03d09000 	.word	0x03d09000
 8001918:	39000000 	.word	0x39000000
 800191c:	4c742400 	.word	0x4c742400
 8001920:	4a742400 	.word	0x4a742400
 8001924:	4af42400 	.word	0x4af42400

08001928 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8001928:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800192a:	e852 3f00 	ldrex	r3, [r2]
 800192e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001932:	e842 3100 	strex	r1, r3, [r2]
 8001936:	2900      	cmp	r1, #0
 8001938:	d1f6      	bne.n	8001928 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800193a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800193c:	f102 0308 	add.w	r3, r2, #8
 8001940:	e853 1f00 	ldrex	r1, [r3]
 8001944:	4b0d      	ldr	r3, [pc, #52]	@ (800197c <UART_EndRxTransfer+0x54>)
 8001946:	400b      	ands	r3, r1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001948:	3208      	adds	r2, #8
 800194a:	e842 3100 	strex	r1, r3, [r2]
 800194e:	2900      	cmp	r1, #0
 8001950:	d1f3      	bne.n	800193a <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001952:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8001954:	2b01      	cmp	r3, #1
 8001956:	d006      	beq.n	8001966 <UART_EndRxTransfer+0x3e>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001958:	2320      	movs	r3, #32
 800195a:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800195e:	2300      	movs	r3, #0
 8001960:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001962:	6743      	str	r3, [r0, #116]	@ 0x74
}
 8001964:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001966:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001968:	e852 3f00 	ldrex	r3, [r2]
 800196c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001970:	e842 3100 	strex	r1, r3, [r2]
 8001974:	2900      	cmp	r1, #0
 8001976:	d1f6      	bne.n	8001966 <UART_EndRxTransfer+0x3e>
 8001978:	e7ee      	b.n	8001958 <UART_EndRxTransfer+0x30>
 800197a:	bf00      	nop
 800197c:	effffffe 	.word	0xeffffffe

08001980 <HAL_UART_MspInit>:
}
 8001980:	4770      	bx	lr
	...

08001984 <UART_SetConfig>:
{
 8001984:	b570      	push	{r4, r5, r6, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800198a:	6883      	ldr	r3, [r0, #8]
 800198c:	6902      	ldr	r2, [r0, #16]
 800198e:	4313      	orrs	r3, r2
 8001990:	6942      	ldr	r2, [r0, #20]
 8001992:	4313      	orrs	r3, r2
 8001994:	69c2      	ldr	r2, [r0, #28]
 8001996:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001998:	6801      	ldr	r1, [r0, #0]
 800199a:	6808      	ldr	r0, [r1, #0]
 800199c:	4a90      	ldr	r2, [pc, #576]	@ (8001be0 <UART_SetConfig+0x25c>)
 800199e:	4002      	ands	r2, r0
 80019a0:	431a      	orrs	r2, r3
 80019a2:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80019a4:	6822      	ldr	r2, [r4, #0]
 80019a6:	6853      	ldr	r3, [r2, #4]
 80019a8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80019ac:	68e1      	ldr	r1, [r4, #12]
 80019ae:	430b      	orrs	r3, r1
 80019b0:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80019b2:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80019b4:	6822      	ldr	r2, [r4, #0]
 80019b6:	4b8b      	ldr	r3, [pc, #556]	@ (8001be4 <UART_SetConfig+0x260>)
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d001      	beq.n	80019c0 <UART_SetConfig+0x3c>
    tmpreg |= huart->Init.OneBitSampling;
 80019bc:	6a23      	ldr	r3, [r4, #32]
 80019be:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80019c0:	6890      	ldr	r0, [r2, #8]
 80019c2:	4b89      	ldr	r3, [pc, #548]	@ (8001be8 <UART_SetConfig+0x264>)
 80019c4:	4003      	ands	r3, r0
 80019c6:	430b      	orrs	r3, r1
 80019c8:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80019ca:	6822      	ldr	r2, [r4, #0]
 80019cc:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 80019ce:	f023 030f 	bic.w	r3, r3, #15
 80019d2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80019d4:	430b      	orrs	r3, r1
 80019d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80019d8:	6823      	ldr	r3, [r4, #0]
 80019da:	4a84      	ldr	r2, [pc, #528]	@ (8001bec <UART_SetConfig+0x268>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d029      	beq.n	8001a34 <UART_SetConfig+0xb0>
 80019e0:	4a83      	ldr	r2, [pc, #524]	@ (8001bf0 <UART_SetConfig+0x26c>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	f000 8094 	beq.w	8001b10 <UART_SetConfig+0x18c>
 80019e8:	4a82      	ldr	r2, [pc, #520]	@ (8001bf4 <UART_SetConfig+0x270>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	f000 80aa 	beq.w	8001b44 <UART_SetConfig+0x1c0>
 80019f0:	4a81      	ldr	r2, [pc, #516]	@ (8001bf8 <UART_SetConfig+0x274>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	f000 80c0 	beq.w	8001b78 <UART_SetConfig+0x1f4>
 80019f8:	4a80      	ldr	r2, [pc, #512]	@ (8001bfc <UART_SetConfig+0x278>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	f000 80d6 	beq.w	8001bac <UART_SetConfig+0x228>
 8001a00:	4a7f      	ldr	r2, [pc, #508]	@ (8001c00 <UART_SetConfig+0x27c>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	f000 8108 	beq.w	8001c18 <UART_SetConfig+0x294>
 8001a08:	4a7e      	ldr	r2, [pc, #504]	@ (8001c04 <UART_SetConfig+0x280>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	f000 812d 	beq.w	8001c6a <UART_SetConfig+0x2e6>
 8001a10:	4a7d      	ldr	r2, [pc, #500]	@ (8001c08 <UART_SetConfig+0x284>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	f000 8140 	beq.w	8001c98 <UART_SetConfig+0x314>
 8001a18:	4a7c      	ldr	r2, [pc, #496]	@ (8001c0c <UART_SetConfig+0x288>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	f000 8153 	beq.w	8001cc6 <UART_SetConfig+0x342>
 8001a20:	4a7b      	ldr	r2, [pc, #492]	@ (8001c10 <UART_SetConfig+0x28c>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	f000 8178 	beq.w	8001d18 <UART_SetConfig+0x394>
 8001a28:	4a6e      	ldr	r2, [pc, #440]	@ (8001be4 <UART_SetConfig+0x260>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	f000 819d 	beq.w	8001d6a <UART_SetConfig+0x3e6>
 8001a30:	2280      	movs	r2, #128	@ 0x80
 8001a32:	e03b      	b.n	8001aac <UART_SetConfig+0x128>
 8001a34:	4a77      	ldr	r2, [pc, #476]	@ (8001c14 <UART_SetConfig+0x290>)
 8001a36:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8001a38:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8001a3c:	2a28      	cmp	r2, #40	@ 0x28
 8001a3e:	d834      	bhi.n	8001aaa <UART_SetConfig+0x126>
 8001a40:	e8df f012 	tbh	[pc, r2, lsl #1]
 8001a44:	00330029 	.word	0x00330029
 8001a48:	00330033 	.word	0x00330033
 8001a4c:	00330033 	.word	0x00330033
 8001a50:	00330033 	.word	0x00330033
 8001a54:	003301ab 	.word	0x003301ab
 8001a58:	00330033 	.word	0x00330033
 8001a5c:	00330033 	.word	0x00330033
 8001a60:	00330033 	.word	0x00330033
 8001a64:	0033002b 	.word	0x0033002b
 8001a68:	00330033 	.word	0x00330033
 8001a6c:	00330033 	.word	0x00330033
 8001a70:	00330033 	.word	0x00330033
 8001a74:	0033002d 	.word	0x0033002d
 8001a78:	00330033 	.word	0x00330033
 8001a7c:	00330033 	.word	0x00330033
 8001a80:	00330033 	.word	0x00330033
 8001a84:	0033002f 	.word	0x0033002f
 8001a88:	00330033 	.word	0x00330033
 8001a8c:	00330033 	.word	0x00330033
 8001a90:	00330033 	.word	0x00330033
 8001a94:	0031      	.short	0x0031
 8001a96:	2201      	movs	r2, #1
 8001a98:	e008      	b.n	8001aac <UART_SetConfig+0x128>
 8001a9a:	2208      	movs	r2, #8
 8001a9c:	e006      	b.n	8001aac <UART_SetConfig+0x128>
 8001a9e:	2210      	movs	r2, #16
 8001aa0:	e004      	b.n	8001aac <UART_SetConfig+0x128>
 8001aa2:	2220      	movs	r2, #32
 8001aa4:	e002      	b.n	8001aac <UART_SetConfig+0x128>
 8001aa6:	2240      	movs	r2, #64	@ 0x40
 8001aa8:	e000      	b.n	8001aac <UART_SetConfig+0x128>
 8001aaa:	2280      	movs	r2, #128	@ 0x80
  if (UART_INSTANCE_LOWPOWER(huart))
 8001aac:	494d      	ldr	r1, [pc, #308]	@ (8001be4 <UART_SetConfig+0x260>)
 8001aae:	428b      	cmp	r3, r1
 8001ab0:	f000 818c 	beq.w	8001dcc <UART_SetConfig+0x448>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ab4:	69e0      	ldr	r0, [r4, #28]
 8001ab6:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8001aba:	f000 8202 	beq.w	8001ec2 <UART_SetConfig+0x53e>
    switch (clocksource)
 8001abe:	2a20      	cmp	r2, #32
 8001ac0:	f200 825a 	bhi.w	8001f78 <UART_SetConfig+0x5f4>
 8001ac4:	2a20      	cmp	r2, #32
 8001ac6:	f200 82a4 	bhi.w	8002012 <UART_SetConfig+0x68e>
 8001aca:	e8df f012 	tbh	[pc, r2, lsl #1]
 8001ace:	0271      	.short	0x0271
 8001ad0:	02a20277 	.word	0x02a20277
 8001ad4:	027a02a2 	.word	0x027a02a2
 8001ad8:	02a202a2 	.word	0x02a202a2
 8001adc:	027f02a2 	.word	0x027f02a2
 8001ae0:	02a202a2 	.word	0x02a202a2
 8001ae4:	02a202a2 	.word	0x02a202a2
 8001ae8:	02a202a2 	.word	0x02a202a2
 8001aec:	028402a2 	.word	0x028402a2
 8001af0:	02a202a2 	.word	0x02a202a2
 8001af4:	02a202a2 	.word	0x02a202a2
 8001af8:	02a202a2 	.word	0x02a202a2
 8001afc:	02a202a2 	.word	0x02a202a2
 8001b00:	02a202a2 	.word	0x02a202a2
 8001b04:	02a202a2 	.word	0x02a202a2
 8001b08:	02a202a2 	.word	0x02a202a2
 8001b0c:	029002a2 	.word	0x029002a2
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b10:	4a40      	ldr	r2, [pc, #256]	@ (8001c14 <UART_SetConfig+0x290>)
 8001b12:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8001b14:	f002 0207 	and.w	r2, r2, #7
 8001b18:	2a05      	cmp	r2, #5
 8001b1a:	d811      	bhi.n	8001b40 <UART_SetConfig+0x1bc>
 8001b1c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8001b20:	013f0006 	.word	0x013f0006
 8001b24:	000a0008 	.word	0x000a0008
 8001b28:	000e000c 	.word	0x000e000c
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	e7bd      	b.n	8001aac <UART_SetConfig+0x128>
 8001b30:	2208      	movs	r2, #8
 8001b32:	e7bb      	b.n	8001aac <UART_SetConfig+0x128>
 8001b34:	2210      	movs	r2, #16
 8001b36:	e7b9      	b.n	8001aac <UART_SetConfig+0x128>
 8001b38:	2220      	movs	r2, #32
 8001b3a:	e7b7      	b.n	8001aac <UART_SetConfig+0x128>
 8001b3c:	2240      	movs	r2, #64	@ 0x40
 8001b3e:	e7b5      	b.n	8001aac <UART_SetConfig+0x128>
 8001b40:	2280      	movs	r2, #128	@ 0x80
 8001b42:	e7b3      	b.n	8001aac <UART_SetConfig+0x128>
 8001b44:	4a33      	ldr	r2, [pc, #204]	@ (8001c14 <UART_SetConfig+0x290>)
 8001b46:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8001b48:	f002 0207 	and.w	r2, r2, #7
 8001b4c:	2a05      	cmp	r2, #5
 8001b4e:	d811      	bhi.n	8001b74 <UART_SetConfig+0x1f0>
 8001b50:	e8df f012 	tbh	[pc, r2, lsl #1]
 8001b54:	01270006 	.word	0x01270006
 8001b58:	000a0008 	.word	0x000a0008
 8001b5c:	000e000c 	.word	0x000e000c
 8001b60:	2200      	movs	r2, #0
 8001b62:	e7a3      	b.n	8001aac <UART_SetConfig+0x128>
 8001b64:	2208      	movs	r2, #8
 8001b66:	e7a1      	b.n	8001aac <UART_SetConfig+0x128>
 8001b68:	2210      	movs	r2, #16
 8001b6a:	e79f      	b.n	8001aac <UART_SetConfig+0x128>
 8001b6c:	2220      	movs	r2, #32
 8001b6e:	e79d      	b.n	8001aac <UART_SetConfig+0x128>
 8001b70:	2240      	movs	r2, #64	@ 0x40
 8001b72:	e79b      	b.n	8001aac <UART_SetConfig+0x128>
 8001b74:	2280      	movs	r2, #128	@ 0x80
 8001b76:	e799      	b.n	8001aac <UART_SetConfig+0x128>
 8001b78:	4a26      	ldr	r2, [pc, #152]	@ (8001c14 <UART_SetConfig+0x290>)
 8001b7a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8001b7c:	f002 0207 	and.w	r2, r2, #7
 8001b80:	2a05      	cmp	r2, #5
 8001b82:	d811      	bhi.n	8001ba8 <UART_SetConfig+0x224>
 8001b84:	e8df f012 	tbh	[pc, r2, lsl #1]
 8001b88:	010f0006 	.word	0x010f0006
 8001b8c:	000a0008 	.word	0x000a0008
 8001b90:	000e000c 	.word	0x000e000c
 8001b94:	2200      	movs	r2, #0
 8001b96:	e789      	b.n	8001aac <UART_SetConfig+0x128>
 8001b98:	2208      	movs	r2, #8
 8001b9a:	e787      	b.n	8001aac <UART_SetConfig+0x128>
 8001b9c:	2210      	movs	r2, #16
 8001b9e:	e785      	b.n	8001aac <UART_SetConfig+0x128>
 8001ba0:	2220      	movs	r2, #32
 8001ba2:	e783      	b.n	8001aac <UART_SetConfig+0x128>
 8001ba4:	2240      	movs	r2, #64	@ 0x40
 8001ba6:	e781      	b.n	8001aac <UART_SetConfig+0x128>
 8001ba8:	2280      	movs	r2, #128	@ 0x80
 8001baa:	e77f      	b.n	8001aac <UART_SetConfig+0x128>
 8001bac:	4a19      	ldr	r2, [pc, #100]	@ (8001c14 <UART_SetConfig+0x290>)
 8001bae:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8001bb0:	f002 0207 	and.w	r2, r2, #7
 8001bb4:	2a05      	cmp	r2, #5
 8001bb6:	d811      	bhi.n	8001bdc <UART_SetConfig+0x258>
 8001bb8:	e8df f012 	tbh	[pc, r2, lsl #1]
 8001bbc:	00f70006 	.word	0x00f70006
 8001bc0:	000a0008 	.word	0x000a0008
 8001bc4:	000e000c 	.word	0x000e000c
 8001bc8:	2200      	movs	r2, #0
 8001bca:	e76f      	b.n	8001aac <UART_SetConfig+0x128>
 8001bcc:	2208      	movs	r2, #8
 8001bce:	e76d      	b.n	8001aac <UART_SetConfig+0x128>
 8001bd0:	2210      	movs	r2, #16
 8001bd2:	e76b      	b.n	8001aac <UART_SetConfig+0x128>
 8001bd4:	2220      	movs	r2, #32
 8001bd6:	e769      	b.n	8001aac <UART_SetConfig+0x128>
 8001bd8:	2240      	movs	r2, #64	@ 0x40
 8001bda:	e767      	b.n	8001aac <UART_SetConfig+0x128>
 8001bdc:	2280      	movs	r2, #128	@ 0x80
 8001bde:	e765      	b.n	8001aac <UART_SetConfig+0x128>
 8001be0:	cfff69f3 	.word	0xcfff69f3
 8001be4:	58000c00 	.word	0x58000c00
 8001be8:	11fff4ff 	.word	0x11fff4ff
 8001bec:	40011000 	.word	0x40011000
 8001bf0:	40004400 	.word	0x40004400
 8001bf4:	40004800 	.word	0x40004800
 8001bf8:	40004c00 	.word	0x40004c00
 8001bfc:	40005000 	.word	0x40005000
 8001c00:	40011400 	.word	0x40011400
 8001c04:	40007800 	.word	0x40007800
 8001c08:	40007c00 	.word	0x40007c00
 8001c0c:	40011800 	.word	0x40011800
 8001c10:	40011c00 	.word	0x40011c00
 8001c14:	58024400 	.word	0x58024400
 8001c18:	4a69      	ldr	r2, [pc, #420]	@ (8001dc0 <UART_SetConfig+0x43c>)
 8001c1a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8001c1c:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8001c20:	2a28      	cmp	r2, #40	@ 0x28
 8001c22:	d820      	bhi.n	8001c66 <UART_SetConfig+0x2e2>
 8001c24:	e8df f002 	tbb	[pc, r2]
 8001c28:	1f1f1f15 	.word	0x1f1f1f15
 8001c2c:	1f1f1f1f 	.word	0x1f1f1f1f
 8001c30:	1f1f1fc3 	.word	0x1f1f1fc3
 8001c34:	1f1f1f1f 	.word	0x1f1f1f1f
 8001c38:	1f1f1f17 	.word	0x1f1f1f17
 8001c3c:	1f1f1f1f 	.word	0x1f1f1f1f
 8001c40:	1f1f1f19 	.word	0x1f1f1f19
 8001c44:	1f1f1f1f 	.word	0x1f1f1f1f
 8001c48:	1f1f1f1b 	.word	0x1f1f1f1b
 8001c4c:	1f1f1f1f 	.word	0x1f1f1f1f
 8001c50:	1d          	.byte	0x1d
 8001c51:	00          	.byte	0x00
 8001c52:	2201      	movs	r2, #1
 8001c54:	e72a      	b.n	8001aac <UART_SetConfig+0x128>
 8001c56:	2208      	movs	r2, #8
 8001c58:	e728      	b.n	8001aac <UART_SetConfig+0x128>
 8001c5a:	2210      	movs	r2, #16
 8001c5c:	e726      	b.n	8001aac <UART_SetConfig+0x128>
 8001c5e:	2220      	movs	r2, #32
 8001c60:	e724      	b.n	8001aac <UART_SetConfig+0x128>
 8001c62:	2240      	movs	r2, #64	@ 0x40
 8001c64:	e722      	b.n	8001aac <UART_SetConfig+0x128>
 8001c66:	2280      	movs	r2, #128	@ 0x80
 8001c68:	e720      	b.n	8001aac <UART_SetConfig+0x128>
 8001c6a:	4a55      	ldr	r2, [pc, #340]	@ (8001dc0 <UART_SetConfig+0x43c>)
 8001c6c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8001c6e:	f002 0207 	and.w	r2, r2, #7
 8001c72:	2a05      	cmp	r2, #5
 8001c74:	d80e      	bhi.n	8001c94 <UART_SetConfig+0x310>
 8001c76:	e8df f002 	tbb	[pc, r2]
 8001c7a:	9c03      	.short	0x9c03
 8001c7c:	0b090705 	.word	0x0b090705
 8001c80:	2200      	movs	r2, #0
 8001c82:	e713      	b.n	8001aac <UART_SetConfig+0x128>
 8001c84:	2208      	movs	r2, #8
 8001c86:	e711      	b.n	8001aac <UART_SetConfig+0x128>
 8001c88:	2210      	movs	r2, #16
 8001c8a:	e70f      	b.n	8001aac <UART_SetConfig+0x128>
 8001c8c:	2220      	movs	r2, #32
 8001c8e:	e70d      	b.n	8001aac <UART_SetConfig+0x128>
 8001c90:	2240      	movs	r2, #64	@ 0x40
 8001c92:	e70b      	b.n	8001aac <UART_SetConfig+0x128>
 8001c94:	2280      	movs	r2, #128	@ 0x80
 8001c96:	e709      	b.n	8001aac <UART_SetConfig+0x128>
 8001c98:	4a49      	ldr	r2, [pc, #292]	@ (8001dc0 <UART_SetConfig+0x43c>)
 8001c9a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8001c9c:	f002 0207 	and.w	r2, r2, #7
 8001ca0:	2a05      	cmp	r2, #5
 8001ca2:	d80e      	bhi.n	8001cc2 <UART_SetConfig+0x33e>
 8001ca4:	e8df f002 	tbb	[pc, r2]
 8001ca8:	07058703 	.word	0x07058703
 8001cac:	0b09      	.short	0x0b09
 8001cae:	2200      	movs	r2, #0
 8001cb0:	e6fc      	b.n	8001aac <UART_SetConfig+0x128>
 8001cb2:	2208      	movs	r2, #8
 8001cb4:	e6fa      	b.n	8001aac <UART_SetConfig+0x128>
 8001cb6:	2210      	movs	r2, #16
 8001cb8:	e6f8      	b.n	8001aac <UART_SetConfig+0x128>
 8001cba:	2220      	movs	r2, #32
 8001cbc:	e6f6      	b.n	8001aac <UART_SetConfig+0x128>
 8001cbe:	2240      	movs	r2, #64	@ 0x40
 8001cc0:	e6f4      	b.n	8001aac <UART_SetConfig+0x128>
 8001cc2:	2280      	movs	r2, #128	@ 0x80
 8001cc4:	e6f2      	b.n	8001aac <UART_SetConfig+0x128>
 8001cc6:	4a3e      	ldr	r2, [pc, #248]	@ (8001dc0 <UART_SetConfig+0x43c>)
 8001cc8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8001cca:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8001cce:	2a28      	cmp	r2, #40	@ 0x28
 8001cd0:	d820      	bhi.n	8001d14 <UART_SetConfig+0x390>
 8001cd2:	e8df f002 	tbb	[pc, r2]
 8001cd6:	1f15      	.short	0x1f15
 8001cd8:	1f1f1f1f 	.word	0x1f1f1f1f
 8001cdc:	1f721f1f 	.word	0x1f721f1f
 8001ce0:	1f1f1f1f 	.word	0x1f1f1f1f
 8001ce4:	1f171f1f 	.word	0x1f171f1f
 8001ce8:	1f1f1f1f 	.word	0x1f1f1f1f
 8001cec:	1f191f1f 	.word	0x1f191f1f
 8001cf0:	1f1f1f1f 	.word	0x1f1f1f1f
 8001cf4:	1f1b1f1f 	.word	0x1f1b1f1f
 8001cf8:	1f1f1f1f 	.word	0x1f1f1f1f
 8001cfc:	1f1f      	.short	0x1f1f
 8001cfe:	1d          	.byte	0x1d
 8001cff:	00          	.byte	0x00
 8001d00:	2201      	movs	r2, #1
 8001d02:	e6d3      	b.n	8001aac <UART_SetConfig+0x128>
 8001d04:	2208      	movs	r2, #8
 8001d06:	e6d1      	b.n	8001aac <UART_SetConfig+0x128>
 8001d08:	2210      	movs	r2, #16
 8001d0a:	e6cf      	b.n	8001aac <UART_SetConfig+0x128>
 8001d0c:	2220      	movs	r2, #32
 8001d0e:	e6cd      	b.n	8001aac <UART_SetConfig+0x128>
 8001d10:	2240      	movs	r2, #64	@ 0x40
 8001d12:	e6cb      	b.n	8001aac <UART_SetConfig+0x128>
 8001d14:	2280      	movs	r2, #128	@ 0x80
 8001d16:	e6c9      	b.n	8001aac <UART_SetConfig+0x128>
 8001d18:	4a29      	ldr	r2, [pc, #164]	@ (8001dc0 <UART_SetConfig+0x43c>)
 8001d1a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8001d1c:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8001d20:	2a28      	cmp	r2, #40	@ 0x28
 8001d22:	d820      	bhi.n	8001d66 <UART_SetConfig+0x3e2>
 8001d24:	e8df f002 	tbb	[pc, r2]
 8001d28:	1f1f1f15 	.word	0x1f1f1f15
 8001d2c:	1f1f1f1f 	.word	0x1f1f1f1f
 8001d30:	1f1f1f4e 	.word	0x1f1f1f4e
 8001d34:	1f1f1f1f 	.word	0x1f1f1f1f
 8001d38:	1f1f1f17 	.word	0x1f1f1f17
 8001d3c:	1f1f1f1f 	.word	0x1f1f1f1f
 8001d40:	1f1f1f19 	.word	0x1f1f1f19
 8001d44:	1f1f1f1f 	.word	0x1f1f1f1f
 8001d48:	1f1f1f1b 	.word	0x1f1f1f1b
 8001d4c:	1f1f1f1f 	.word	0x1f1f1f1f
 8001d50:	1d          	.byte	0x1d
 8001d51:	00          	.byte	0x00
 8001d52:	2201      	movs	r2, #1
 8001d54:	e6aa      	b.n	8001aac <UART_SetConfig+0x128>
 8001d56:	2208      	movs	r2, #8
 8001d58:	e6a8      	b.n	8001aac <UART_SetConfig+0x128>
 8001d5a:	2210      	movs	r2, #16
 8001d5c:	e6a6      	b.n	8001aac <UART_SetConfig+0x128>
 8001d5e:	2220      	movs	r2, #32
 8001d60:	e6a4      	b.n	8001aac <UART_SetConfig+0x128>
 8001d62:	2240      	movs	r2, #64	@ 0x40
 8001d64:	e6a2      	b.n	8001aac <UART_SetConfig+0x128>
 8001d66:	2280      	movs	r2, #128	@ 0x80
 8001d68:	e6a0      	b.n	8001aac <UART_SetConfig+0x128>
 8001d6a:	f502 320e 	add.w	r2, r2, #145408	@ 0x23800
 8001d6e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001d70:	f002 0207 	and.w	r2, r2, #7
 8001d74:	2a05      	cmp	r2, #5
 8001d76:	d80e      	bhi.n	8001d96 <UART_SetConfig+0x412>
 8001d78:	e8df f002 	tbb	[pc, r2]
 8001d7c:	07052603 	.word	0x07052603
 8001d80:	0b09      	.short	0x0b09
 8001d82:	2202      	movs	r2, #2
 8001d84:	e692      	b.n	8001aac <UART_SetConfig+0x128>
 8001d86:	2208      	movs	r2, #8
 8001d88:	e690      	b.n	8001aac <UART_SetConfig+0x128>
 8001d8a:	2210      	movs	r2, #16
 8001d8c:	e68e      	b.n	8001aac <UART_SetConfig+0x128>
 8001d8e:	2220      	movs	r2, #32
 8001d90:	e68c      	b.n	8001aac <UART_SetConfig+0x128>
 8001d92:	2240      	movs	r2, #64	@ 0x40
 8001d94:	e68a      	b.n	8001aac <UART_SetConfig+0x128>
 8001d96:	2280      	movs	r2, #128	@ 0x80
 8001d98:	e688      	b.n	8001aac <UART_SetConfig+0x128>
 8001d9a:	2204      	movs	r2, #4
 8001d9c:	e686      	b.n	8001aac <UART_SetConfig+0x128>
 8001d9e:	2204      	movs	r2, #4
 8001da0:	e684      	b.n	8001aac <UART_SetConfig+0x128>
 8001da2:	2204      	movs	r2, #4
 8001da4:	e682      	b.n	8001aac <UART_SetConfig+0x128>
 8001da6:	2204      	movs	r2, #4
 8001da8:	e680      	b.n	8001aac <UART_SetConfig+0x128>
 8001daa:	2204      	movs	r2, #4
 8001dac:	e67e      	b.n	8001aac <UART_SetConfig+0x128>
 8001dae:	2204      	movs	r2, #4
 8001db0:	e67c      	b.n	8001aac <UART_SetConfig+0x128>
 8001db2:	2204      	movs	r2, #4
 8001db4:	e67a      	b.n	8001aac <UART_SetConfig+0x128>
 8001db6:	2204      	movs	r2, #4
 8001db8:	e678      	b.n	8001aac <UART_SetConfig+0x128>
 8001dba:	2204      	movs	r2, #4
 8001dbc:	e676      	b.n	8001aac <UART_SetConfig+0x128>
 8001dbe:	bf00      	nop
 8001dc0:	58024400 	.word	0x58024400
 8001dc4:	2204      	movs	r2, #4
 8001dc6:	e671      	b.n	8001aac <UART_SetConfig+0x128>
 8001dc8:	2204      	movs	r2, #4
 8001dca:	e66f      	b.n	8001aac <UART_SetConfig+0x128>
    switch (clocksource)
 8001dcc:	2a20      	cmp	r2, #32
 8001dce:	d827      	bhi.n	8001e20 <UART_SetConfig+0x49c>
 8001dd0:	2a02      	cmp	r2, #2
 8001dd2:	f0c0 8110 	bcc.w	8001ff6 <UART_SetConfig+0x672>
 8001dd6:	3a02      	subs	r2, #2
 8001dd8:	2a1e      	cmp	r2, #30
 8001dda:	f200 810e 	bhi.w	8001ffa <UART_SetConfig+0x676>
 8001dde:	e8df f012 	tbh	[pc, r2, lsl #1]
 8001de2:	0050      	.short	0x0050
 8001de4:	0056010c 	.word	0x0056010c
 8001de8:	010c010c 	.word	0x010c010c
 8001dec:	005b010c 	.word	0x005b010c
 8001df0:	010c010c 	.word	0x010c010c
 8001df4:	010c010c 	.word	0x010c010c
 8001df8:	010c010c 	.word	0x010c010c
 8001dfc:	0060010c 	.word	0x0060010c
 8001e00:	010c010c 	.word	0x010c010c
 8001e04:	010c010c 	.word	0x010c010c
 8001e08:	010c010c 	.word	0x010c010c
 8001e0c:	010c010c 	.word	0x010c010c
 8001e10:	010c010c 	.word	0x010c010c
 8001e14:	010c010c 	.word	0x010c010c
 8001e18:	010c010c 	.word	0x010c010c
 8001e1c:	006c010c 	.word	0x006c010c
 8001e20:	2a40      	cmp	r2, #64	@ 0x40
 8001e22:	d12c      	bne.n	8001e7e <UART_SetConfig+0x4fa>
        pclk = (uint32_t) LSE_VALUE;
 8001e24:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8001e28:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001e2a:	4b80      	ldr	r3, [pc, #512]	@ (800202c <UART_SetConfig+0x6a8>)
 8001e2c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001e30:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001e34:	6865      	ldr	r5, [r4, #4]
 8001e36:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8001e3a:	4299      	cmp	r1, r3
 8001e3c:	f200 80df 	bhi.w	8001ffe <UART_SetConfig+0x67a>
 8001e40:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8001e44:	f200 80dd 	bhi.w	8002002 <UART_SetConfig+0x67e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001e48:	2600      	movs	r6, #0
 8001e4a:	4633      	mov	r3, r6
 8001e4c:	4631      	mov	r1, r6
 8001e4e:	f7fe fa3d 	bl	80002cc <__aeabi_uldivmod>
 8001e52:	0209      	lsls	r1, r1, #8
 8001e54:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8001e58:	0200      	lsls	r0, r0, #8
 8001e5a:	086b      	lsrs	r3, r5, #1
 8001e5c:	18c0      	adds	r0, r0, r3
 8001e5e:	462a      	mov	r2, r5
 8001e60:	4633      	mov	r3, r6
 8001e62:	f141 0100 	adc.w	r1, r1, #0
 8001e66:	f7fe fa31 	bl	80002cc <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001e6a:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8001e6e:	4b70      	ldr	r3, [pc, #448]	@ (8002030 <UART_SetConfig+0x6ac>)
 8001e70:	429a      	cmp	r2, r3
 8001e72:	f200 80c8 	bhi.w	8002006 <UART_SetConfig+0x682>
          huart->Instance->BRR = usartdiv;
 8001e76:	6823      	ldr	r3, [r4, #0]
 8001e78:	60d8      	str	r0, [r3, #12]
 8001e7a:	4630      	mov	r0, r6
 8001e7c:	e0ca      	b.n	8002014 <UART_SetConfig+0x690>
    switch (clocksource)
 8001e7e:	2001      	movs	r0, #1
 8001e80:	e0c8      	b.n	8002014 <UART_SetConfig+0x690>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8001e82:	f7ff fb3f 	bl	8001504 <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 8001e86:	2800      	cmp	r0, #0
 8001e88:	d1ce      	bne.n	8001e28 <UART_SetConfig+0x4a4>
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	e0c2      	b.n	8002014 <UART_SetConfig+0x690>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8001e8e:	a803      	add	r0, sp, #12
 8001e90:	f7ff fb4a 	bl	8001528 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8001e94:	9804      	ldr	r0, [sp, #16]
        break;
 8001e96:	e7f6      	b.n	8001e86 <UART_SetConfig+0x502>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8001e98:	4668      	mov	r0, sp
 8001e9a:	f7ff fc45 	bl	8001728 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8001e9e:	9801      	ldr	r0, [sp, #4]
        break;
 8001ea0:	e7f1      	b.n	8001e86 <UART_SetConfig+0x502>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001ea2:	4b64      	ldr	r3, [pc, #400]	@ (8002034 <UART_SetConfig+0x6b0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f013 0f20 	tst.w	r3, #32
 8001eaa:	d008      	beq.n	8001ebe <UART_SetConfig+0x53a>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8001eac:	4b61      	ldr	r3, [pc, #388]	@ (8002034 <UART_SetConfig+0x6b0>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8001eb4:	4860      	ldr	r0, [pc, #384]	@ (8002038 <UART_SetConfig+0x6b4>)
 8001eb6:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8001eb8:	e7b6      	b.n	8001e28 <UART_SetConfig+0x4a4>
    switch (clocksource)
 8001eba:	4860      	ldr	r0, [pc, #384]	@ (800203c <UART_SetConfig+0x6b8>)
 8001ebc:	e7b4      	b.n	8001e28 <UART_SetConfig+0x4a4>
          pclk = (uint32_t) HSI_VALUE;
 8001ebe:	485e      	ldr	r0, [pc, #376]	@ (8002038 <UART_SetConfig+0x6b4>)
 8001ec0:	e7b2      	b.n	8001e28 <UART_SetConfig+0x4a4>
    switch (clocksource)
 8001ec2:	2a20      	cmp	r2, #32
 8001ec4:	d815      	bhi.n	8001ef2 <UART_SetConfig+0x56e>
 8001ec6:	2a20      	cmp	r2, #32
 8001ec8:	f200 809f 	bhi.w	800200a <UART_SetConfig+0x686>
 8001ecc:	e8df f002 	tbb	[pc, r2]
 8001ed0:	9d9d3731 	.word	0x9d9d3731
 8001ed4:	9d9d9d3a 	.word	0x9d9d9d3a
 8001ed8:	9d9d9d3f 	.word	0x9d9d9d3f
 8001edc:	9d9d9d9d 	.word	0x9d9d9d9d
 8001ee0:	9d9d9d44 	.word	0x9d9d9d44
 8001ee4:	9d9d9d9d 	.word	0x9d9d9d9d
 8001ee8:	9d9d9d9d 	.word	0x9d9d9d9d
 8001eec:	9d9d9d9d 	.word	0x9d9d9d9d
 8001ef0:	50          	.byte	0x50
 8001ef1:	00          	.byte	0x00
 8001ef2:	2a40      	cmp	r2, #64	@ 0x40
 8001ef4:	d11b      	bne.n	8001f2e <UART_SetConfig+0x5aa>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001ef6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001ef8:	4b4c      	ldr	r3, [pc, #304]	@ (800202c <UART_SetConfig+0x6a8>)
 8001efa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001efe:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f02:	6862      	ldr	r2, [r4, #4]
 8001f04:	0853      	lsrs	r3, r2, #1
 8001f06:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8001f0a:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f0e:	f1a3 0110 	sub.w	r1, r3, #16
 8001f12:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8001f16:	4291      	cmp	r1, r2
 8001f18:	d879      	bhi.n	800200e <UART_SetConfig+0x68a>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001f20:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8001f24:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 8001f26:	6822      	ldr	r2, [r4, #0]
 8001f28:	60d3      	str	r3, [r2, #12]
 8001f2a:	2000      	movs	r0, #0
 8001f2c:	e072      	b.n	8002014 <UART_SetConfig+0x690>
    switch (clocksource)
 8001f2e:	2001      	movs	r0, #1
 8001f30:	e070      	b.n	8002014 <UART_SetConfig+0x690>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001f32:	f7ff fac3 	bl	80014bc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8001f36:	2800      	cmp	r0, #0
 8001f38:	d1dd      	bne.n	8001ef6 <UART_SetConfig+0x572>
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	e06a      	b.n	8002014 <UART_SetConfig+0x690>
        pclk = HAL_RCC_GetPCLK2Freq();
 8001f3e:	f7ff facf 	bl	80014e0 <HAL_RCC_GetPCLK2Freq>
        break;
 8001f42:	e7f8      	b.n	8001f36 <UART_SetConfig+0x5b2>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8001f44:	a803      	add	r0, sp, #12
 8001f46:	f7ff faef 	bl	8001528 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8001f4a:	9804      	ldr	r0, [sp, #16]
        break;
 8001f4c:	e7f3      	b.n	8001f36 <UART_SetConfig+0x5b2>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8001f4e:	4668      	mov	r0, sp
 8001f50:	f7ff fbea 	bl	8001728 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8001f54:	9801      	ldr	r0, [sp, #4]
        break;
 8001f56:	e7ee      	b.n	8001f36 <UART_SetConfig+0x5b2>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f58:	4b36      	ldr	r3, [pc, #216]	@ (8002034 <UART_SetConfig+0x6b0>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f013 0f20 	tst.w	r3, #32
 8001f60:	d008      	beq.n	8001f74 <UART_SetConfig+0x5f0>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8001f62:	4b34      	ldr	r3, [pc, #208]	@ (8002034 <UART_SetConfig+0x6b0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8001f6a:	4833      	ldr	r0, [pc, #204]	@ (8002038 <UART_SetConfig+0x6b4>)
 8001f6c:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8001f6e:	e7c2      	b.n	8001ef6 <UART_SetConfig+0x572>
    switch (clocksource)
 8001f70:	4832      	ldr	r0, [pc, #200]	@ (800203c <UART_SetConfig+0x6b8>)
 8001f72:	e7c0      	b.n	8001ef6 <UART_SetConfig+0x572>
          pclk = (uint32_t) HSI_VALUE;
 8001f74:	4830      	ldr	r0, [pc, #192]	@ (8002038 <UART_SetConfig+0x6b4>)
 8001f76:	e7be      	b.n	8001ef6 <UART_SetConfig+0x572>
    switch (clocksource)
 8001f78:	2a40      	cmp	r2, #64	@ 0x40
 8001f7a:	d117      	bne.n	8001fac <UART_SetConfig+0x628>
        pclk = (uint32_t) LSE_VALUE;
 8001f7c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001f80:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8001f82:	4b2a      	ldr	r3, [pc, #168]	@ (800202c <UART_SetConfig+0x6a8>)
 8001f84:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001f88:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f8c:	6863      	ldr	r3, [r4, #4]
 8001f8e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001f92:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f96:	f1a0 0210 	sub.w	r2, r0, #16
 8001f9a:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d842      	bhi.n	8002028 <UART_SetConfig+0x6a4>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001fa2:	6823      	ldr	r3, [r4, #0]
 8001fa4:	b280      	uxth	r0, r0
 8001fa6:	60d8      	str	r0, [r3, #12]
 8001fa8:	2000      	movs	r0, #0
 8001faa:	e033      	b.n	8002014 <UART_SetConfig+0x690>
    switch (clocksource)
 8001fac:	2001      	movs	r0, #1
 8001fae:	e031      	b.n	8002014 <UART_SetConfig+0x690>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001fb0:	f7ff fa84 	bl	80014bc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8001fb4:	2800      	cmp	r0, #0
 8001fb6:	d1e3      	bne.n	8001f80 <UART_SetConfig+0x5fc>
 8001fb8:	2000      	movs	r0, #0
 8001fba:	e02b      	b.n	8002014 <UART_SetConfig+0x690>
        pclk = HAL_RCC_GetPCLK2Freq();
 8001fbc:	f7ff fa90 	bl	80014e0 <HAL_RCC_GetPCLK2Freq>
        break;
 8001fc0:	e7f8      	b.n	8001fb4 <UART_SetConfig+0x630>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8001fc2:	a803      	add	r0, sp, #12
 8001fc4:	f7ff fab0 	bl	8001528 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8001fc8:	9804      	ldr	r0, [sp, #16]
        break;
 8001fca:	e7f3      	b.n	8001fb4 <UART_SetConfig+0x630>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8001fcc:	4668      	mov	r0, sp
 8001fce:	f7ff fbab 	bl	8001728 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8001fd2:	9801      	ldr	r0, [sp, #4]
        break;
 8001fd4:	e7ee      	b.n	8001fb4 <UART_SetConfig+0x630>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001fd6:	4b17      	ldr	r3, [pc, #92]	@ (8002034 <UART_SetConfig+0x6b0>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f013 0f20 	tst.w	r3, #32
 8001fde:	d008      	beq.n	8001ff2 <UART_SetConfig+0x66e>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8001fe0:	4b14      	ldr	r3, [pc, #80]	@ (8002034 <UART_SetConfig+0x6b0>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8001fe8:	4813      	ldr	r0, [pc, #76]	@ (8002038 <UART_SetConfig+0x6b4>)
 8001fea:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8001fec:	e7c8      	b.n	8001f80 <UART_SetConfig+0x5fc>
    switch (clocksource)
 8001fee:	4813      	ldr	r0, [pc, #76]	@ (800203c <UART_SetConfig+0x6b8>)
 8001ff0:	e7c6      	b.n	8001f80 <UART_SetConfig+0x5fc>
          pclk = (uint32_t) HSI_VALUE;
 8001ff2:	4811      	ldr	r0, [pc, #68]	@ (8002038 <UART_SetConfig+0x6b4>)
 8001ff4:	e7c4      	b.n	8001f80 <UART_SetConfig+0x5fc>
    switch (clocksource)
 8001ff6:	2001      	movs	r0, #1
 8001ff8:	e00c      	b.n	8002014 <UART_SetConfig+0x690>
 8001ffa:	2001      	movs	r0, #1
 8001ffc:	e00a      	b.n	8002014 <UART_SetConfig+0x690>
        ret = HAL_ERROR;
 8001ffe:	2001      	movs	r0, #1
 8002000:	e008      	b.n	8002014 <UART_SetConfig+0x690>
 8002002:	2001      	movs	r0, #1
 8002004:	e006      	b.n	8002014 <UART_SetConfig+0x690>
          ret = HAL_ERROR;
 8002006:	2001      	movs	r0, #1
 8002008:	e004      	b.n	8002014 <UART_SetConfig+0x690>
    switch (clocksource)
 800200a:	2001      	movs	r0, #1
 800200c:	e002      	b.n	8002014 <UART_SetConfig+0x690>
        ret = HAL_ERROR;
 800200e:	2001      	movs	r0, #1
 8002010:	e000      	b.n	8002014 <UART_SetConfig+0x690>
    switch (clocksource)
 8002012:	2001      	movs	r0, #1
  huart->NbTxDataToProcess = 1;
 8002014:	2301      	movs	r3, #1
 8002016:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800201a:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 800201e:	2300      	movs	r3, #0
 8002020:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8002022:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 8002024:	b006      	add	sp, #24
 8002026:	bd70      	pop	{r4, r5, r6, pc}
        ret = HAL_ERROR;
 8002028:	2001      	movs	r0, #1
 800202a:	e7f3      	b.n	8002014 <UART_SetConfig+0x690>
 800202c:	080029ec 	.word	0x080029ec
 8002030:	000ffcff 	.word	0x000ffcff
 8002034:	58024400 	.word	0x58024400
 8002038:	03d09000 	.word	0x03d09000
 800203c:	003d0900 	.word	0x003d0900

08002040 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002040:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002042:	f013 0f08 	tst.w	r3, #8
 8002046:	d006      	beq.n	8002056 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002048:	6802      	ldr	r2, [r0, #0]
 800204a:	6853      	ldr	r3, [r2, #4]
 800204c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002050:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8002052:	430b      	orrs	r3, r1
 8002054:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002056:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002058:	f013 0f01 	tst.w	r3, #1
 800205c:	d006      	beq.n	800206c <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800205e:	6802      	ldr	r2, [r0, #0]
 8002060:	6853      	ldr	r3, [r2, #4]
 8002062:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002066:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8002068:	430b      	orrs	r3, r1
 800206a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800206c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800206e:	f013 0f02 	tst.w	r3, #2
 8002072:	d006      	beq.n	8002082 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002074:	6802      	ldr	r2, [r0, #0]
 8002076:	6853      	ldr	r3, [r2, #4]
 8002078:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800207c:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 800207e:	430b      	orrs	r3, r1
 8002080:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002082:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002084:	f013 0f04 	tst.w	r3, #4
 8002088:	d006      	beq.n	8002098 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800208a:	6802      	ldr	r2, [r0, #0]
 800208c:	6853      	ldr	r3, [r2, #4]
 800208e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002092:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8002094:	430b      	orrs	r3, r1
 8002096:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002098:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800209a:	f013 0f10 	tst.w	r3, #16
 800209e:	d006      	beq.n	80020ae <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80020a0:	6802      	ldr	r2, [r0, #0]
 80020a2:	6893      	ldr	r3, [r2, #8]
 80020a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80020a8:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 80020aa:	430b      	orrs	r3, r1
 80020ac:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80020ae:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80020b0:	f013 0f20 	tst.w	r3, #32
 80020b4:	d006      	beq.n	80020c4 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80020b6:	6802      	ldr	r2, [r0, #0]
 80020b8:	6893      	ldr	r3, [r2, #8]
 80020ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80020be:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 80020c0:	430b      	orrs	r3, r1
 80020c2:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80020c4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80020c6:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80020ca:	d00a      	beq.n	80020e2 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80020cc:	6802      	ldr	r2, [r0, #0]
 80020ce:	6853      	ldr	r3, [r2, #4]
 80020d0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80020d4:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 80020d6:	430b      	orrs	r3, r1
 80020d8:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80020da:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80020dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80020e0:	d00b      	beq.n	80020fa <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80020e2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80020e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80020e8:	d006      	beq.n	80020f8 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80020ea:	6802      	ldr	r2, [r0, #0]
 80020ec:	6853      	ldr	r3, [r2, #4]
 80020ee:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80020f2:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 80020f4:	430b      	orrs	r3, r1
 80020f6:	6053      	str	r3, [r2, #4]
}
 80020f8:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80020fa:	6802      	ldr	r2, [r0, #0]
 80020fc:	6853      	ldr	r3, [r2, #4]
 80020fe:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002102:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8002104:	430b      	orrs	r3, r1
 8002106:	6053      	str	r3, [r2, #4]
 8002108:	e7eb      	b.n	80020e2 <UART_AdvFeatureConfig+0xa2>

0800210a <UART_WaitOnFlagUntilTimeout>:
{
 800210a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800210e:	4605      	mov	r5, r0
 8002110:	460e      	mov	r6, r1
 8002112:	4617      	mov	r7, r2
 8002114:	4699      	mov	r9, r3
 8002116:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800211a:	682b      	ldr	r3, [r5, #0]
 800211c:	69dc      	ldr	r4, [r3, #28]
 800211e:	ea36 0404 	bics.w	r4, r6, r4
 8002122:	bf0c      	ite	eq
 8002124:	2401      	moveq	r4, #1
 8002126:	2400      	movne	r4, #0
 8002128:	42bc      	cmp	r4, r7
 800212a:	d13a      	bne.n	80021a2 <UART_WaitOnFlagUntilTimeout+0x98>
    if (Timeout != HAL_MAX_DELAY)
 800212c:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8002130:	d0f3      	beq.n	800211a <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002132:	f7fe fa2f 	bl	8000594 <HAL_GetTick>
 8002136:	eba0 0009 	sub.w	r0, r0, r9
 800213a:	4540      	cmp	r0, r8
 800213c:	d834      	bhi.n	80021a8 <UART_WaitOnFlagUntilTimeout+0x9e>
 800213e:	f1b8 0f00 	cmp.w	r8, #0
 8002142:	d033      	beq.n	80021ac <UART_WaitOnFlagUntilTimeout+0xa2>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002144:	682b      	ldr	r3, [r5, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	f012 0f04 	tst.w	r2, #4
 800214c:	d0e5      	beq.n	800211a <UART_WaitOnFlagUntilTimeout+0x10>
 800214e:	f1b6 0240 	subs.w	r2, r6, #64	@ 0x40
 8002152:	bf18      	it	ne
 8002154:	2201      	movne	r2, #1
 8002156:	2e80      	cmp	r6, #128	@ 0x80
 8002158:	d0df      	beq.n	800211a <UART_WaitOnFlagUntilTimeout+0x10>
 800215a:	2a00      	cmp	r2, #0
 800215c:	d0dd      	beq.n	800211a <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800215e:	69da      	ldr	r2, [r3, #28]
 8002160:	f012 0f08 	tst.w	r2, #8
 8002164:	d111      	bne.n	800218a <UART_WaitOnFlagUntilTimeout+0x80>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002166:	69da      	ldr	r2, [r3, #28]
 8002168:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 800216c:	d0d5      	beq.n	800211a <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800216e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002172:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8002174:	4628      	mov	r0, r5
 8002176:	f7ff fbd7 	bl	8001928 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800217a:	2320      	movs	r3, #32
 800217c:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 8002180:	2300      	movs	r3, #0
 8002182:	f885 3084 	strb.w	r3, [r5, #132]	@ 0x84
          return HAL_TIMEOUT;
 8002186:	2003      	movs	r0, #3
 8002188:	e00c      	b.n	80021a4 <UART_WaitOnFlagUntilTimeout+0x9a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800218a:	2408      	movs	r4, #8
 800218c:	621c      	str	r4, [r3, #32]
          UART_EndRxTransfer(huart);
 800218e:	4628      	mov	r0, r5
 8002190:	f7ff fbca 	bl	8001928 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002194:	f8c5 4090 	str.w	r4, [r5, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 8002198:	2300      	movs	r3, #0
 800219a:	f885 3084 	strb.w	r3, [r5, #132]	@ 0x84
          return HAL_ERROR;
 800219e:	2001      	movs	r0, #1
 80021a0:	e000      	b.n	80021a4 <UART_WaitOnFlagUntilTimeout+0x9a>
  return HAL_OK;
 80021a2:	2000      	movs	r0, #0
}
 80021a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 80021a8:	2003      	movs	r0, #3
 80021aa:	e7fb      	b.n	80021a4 <UART_WaitOnFlagUntilTimeout+0x9a>
 80021ac:	2003      	movs	r0, #3
 80021ae:	e7f9      	b.n	80021a4 <UART_WaitOnFlagUntilTimeout+0x9a>

080021b0 <UART_CheckIdleState>:
{
 80021b0:	b530      	push	{r4, r5, lr}
 80021b2:	b083      	sub	sp, #12
 80021b4:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021b6:	2300      	movs	r3, #0
 80021b8:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 80021bc:	f7fe f9ea 	bl	8000594 <HAL_GetTick>
 80021c0:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80021c2:	6822      	ldr	r2, [r4, #0]
 80021c4:	6812      	ldr	r2, [r2, #0]
 80021c6:	f012 0f08 	tst.w	r2, #8
 80021ca:	d110      	bne.n	80021ee <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80021cc:	6823      	ldr	r3, [r4, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f013 0f04 	tst.w	r3, #4
 80021d4:	d128      	bne.n	8002228 <UART_CheckIdleState+0x78>
  huart->gState = HAL_UART_STATE_READY;
 80021d6:	2320      	movs	r3, #32
 80021d8:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80021dc:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021e0:	2000      	movs	r0, #0
 80021e2:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80021e4:	6720      	str	r0, [r4, #112]	@ 0x70
  __HAL_UNLOCK(huart);
 80021e6:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 80021ea:	b003      	add	sp, #12
 80021ec:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80021ee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80021f2:	9300      	str	r3, [sp, #0]
 80021f4:	4603      	mov	r3, r0
 80021f6:	2200      	movs	r2, #0
 80021f8:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80021fc:	4620      	mov	r0, r4
 80021fe:	f7ff ff84 	bl	800210a <UART_WaitOnFlagUntilTimeout>
 8002202:	2800      	cmp	r0, #0
 8002204:	d0e2      	beq.n	80021cc <UART_CheckIdleState+0x1c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002206:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002208:	e852 3f00 	ldrex	r3, [r2]
 800220c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002210:	e842 3100 	strex	r1, r3, [r2]
 8002214:	2900      	cmp	r1, #0
 8002216:	d1f6      	bne.n	8002206 <UART_CheckIdleState+0x56>
      huart->gState = HAL_UART_STATE_READY;
 8002218:	2320      	movs	r3, #32
 800221a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      __HAL_UNLOCK(huart);
 800221e:	2300      	movs	r3, #0
 8002220:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
      return HAL_TIMEOUT;
 8002224:	2003      	movs	r0, #3
 8002226:	e7e0      	b.n	80021ea <UART_CheckIdleState+0x3a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002228:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	462b      	mov	r3, r5
 8002230:	2200      	movs	r2, #0
 8002232:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002236:	4620      	mov	r0, r4
 8002238:	f7ff ff67 	bl	800210a <UART_WaitOnFlagUntilTimeout>
 800223c:	2800      	cmp	r0, #0
 800223e:	d0ca      	beq.n	80021d6 <UART_CheckIdleState+0x26>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002240:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002242:	e852 3f00 	ldrex	r3, [r2]
 8002246:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800224a:	e842 3100 	strex	r1, r3, [r2]
 800224e:	2900      	cmp	r1, #0
 8002250:	d1f6      	bne.n	8002240 <UART_CheckIdleState+0x90>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002252:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002254:	f102 0308 	add.w	r3, r2, #8
 8002258:	e853 3f00 	ldrex	r3, [r3]
 800225c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002260:	3208      	adds	r2, #8
 8002262:	e842 3100 	strex	r1, r3, [r2]
 8002266:	2900      	cmp	r1, #0
 8002268:	d1f3      	bne.n	8002252 <UART_CheckIdleState+0xa2>
      huart->RxState = HAL_UART_STATE_READY;
 800226a:	2320      	movs	r3, #32
 800226c:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      __HAL_UNLOCK(huart);
 8002270:	2300      	movs	r3, #0
 8002272:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
      return HAL_TIMEOUT;
 8002276:	2003      	movs	r0, #3
 8002278:	e7b7      	b.n	80021ea <UART_CheckIdleState+0x3a>

0800227a <HAL_UART_Init>:
  if (huart == NULL)
 800227a:	b378      	cbz	r0, 80022dc <HAL_UART_Init+0x62>
{
 800227c:	b510      	push	{r4, lr}
 800227e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002280:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8002284:	b30b      	cbz	r3, 80022ca <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002286:	2324      	movs	r3, #36	@ 0x24
 8002288:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 800228c:	6822      	ldr	r2, [r4, #0]
 800228e:	6813      	ldr	r3, [r2, #0]
 8002290:	f023 0301 	bic.w	r3, r3, #1
 8002294:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002296:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002298:	b9e3      	cbnz	r3, 80022d4 <HAL_UART_Init+0x5a>
  if (UART_SetConfig(huart) == HAL_ERROR)
 800229a:	4620      	mov	r0, r4
 800229c:	f7ff fb72 	bl	8001984 <UART_SetConfig>
 80022a0:	2801      	cmp	r0, #1
 80022a2:	d011      	beq.n	80022c8 <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022a4:	6822      	ldr	r2, [r4, #0]
 80022a6:	6853      	ldr	r3, [r2, #4]
 80022a8:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80022ac:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022ae:	6822      	ldr	r2, [r4, #0]
 80022b0:	6893      	ldr	r3, [r2, #8]
 80022b2:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 80022b6:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80022b8:	6822      	ldr	r2, [r4, #0]
 80022ba:	6813      	ldr	r3, [r2, #0]
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80022c2:	4620      	mov	r0, r4
 80022c4:	f7ff ff74 	bl	80021b0 <UART_CheckIdleState>
}
 80022c8:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80022ca:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 80022ce:	f7ff fb57 	bl	8001980 <HAL_UART_MspInit>
 80022d2:	e7d8      	b.n	8002286 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 80022d4:	4620      	mov	r0, r4
 80022d6:	f7ff feb3 	bl	8002040 <UART_AdvFeatureConfig>
 80022da:	e7de      	b.n	800229a <HAL_UART_Init+0x20>
    return HAL_ERROR;
 80022dc:	2001      	movs	r0, #1
}
 80022de:	4770      	bx	lr

080022e0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022e0:	e7fe      	b.n	80022e0 <NMI_Handler>

080022e2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022e2:	e7fe      	b.n	80022e2 <HardFault_Handler>

080022e4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022e4:	e7fe      	b.n	80022e4 <MemManage_Handler>

080022e6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022e6:	e7fe      	b.n	80022e6 <BusFault_Handler>

080022e8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022e8:	e7fe      	b.n	80022e8 <UsageFault_Handler>

080022ea <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022ea:	4770      	bx	lr

080022ec <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022ec:	4770      	bx	lr

080022ee <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022ee:	4770      	bx	lr

080022f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022f2:	f7fe f943 	bl	800057c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022f6:	bd08      	pop	{r3, pc}

080022f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80022f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80022fa:	2000      	movs	r0, #0
 80022fc:	f000 f8e0 	bl	80024c0 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002300:	bd08      	pop	{r3, pc}
	...

08002304 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8002304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002306:	b089      	sub	sp, #36	@ 0x24

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8002308:	4b1f      	ldr	r3, [pc, #124]	@ (8002388 <COM1_MspInit+0x84>)
 800230a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800230e:	f042 0208 	orr.w	r2, r2, #8
 8002312:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002316:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800231a:	f002 0208 	and.w	r2, r2, #8
 800231e:	9200      	str	r2, [sp, #0]
 8002320:	9a00      	ldr	r2, [sp, #0]
  COM1_RX_GPIO_CLK_ENABLE();
 8002322:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002326:	f042 0208 	orr.w	r2, r2, #8
 800232a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800232e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002332:	f002 0208 	and.w	r2, r2, #8
 8002336:	9201      	str	r2, [sp, #4]
 8002338:	9a01      	ldr	r2, [sp, #4]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 800233a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800233e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002342:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8002346:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800234a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800234e:	9302      	str	r3, [sp, #8]
 8002350:	9b02      	ldr	r3, [sp, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8002352:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002356:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002358:	2402      	movs	r4, #2
 800235a:	9404      	str	r4, [sp, #16]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800235c:	9406      	str	r4, [sp, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800235e:	2301      	movs	r3, #1
 8002360:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8002362:	2707      	movs	r7, #7
 8002364:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8002366:	ae03      	add	r6, sp, #12
 8002368:	4d08      	ldr	r5, [pc, #32]	@ (800238c <COM1_MspInit+0x88>)
 800236a:	4631      	mov	r1, r6
 800236c:	4628      	mov	r0, r5
 800236e:	f7fe f9ff 	bl	8000770 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8002372:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002376:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002378:	9404      	str	r4, [sp, #16]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800237a:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800237c:	4631      	mov	r1, r6
 800237e:	4628      	mov	r0, r5
 8002380:	f7fe f9f6 	bl	8000770 <HAL_GPIO_Init>
}
 8002384:	b009      	add	sp, #36	@ 0x24
 8002386:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002388:	58024400 	.word	0x58024400
 800238c:	58020c00 	.word	0x58020c00

08002390 <BSP_LED_Init>:
  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8002390:	2802      	cmp	r0, #2
 8002392:	d846      	bhi.n	8002422 <BSP_LED_Init+0x92>
{
 8002394:	b570      	push	{r4, r5, r6, lr}
 8002396:	b088      	sub	sp, #32
    if(Led == LED1)
 8002398:	bb28      	cbnz	r0, 80023e6 <BSP_LED_Init+0x56>
      LED1_GPIO_CLK_ENABLE();
 800239a:	4b23      	ldr	r3, [pc, #140]	@ (8002428 <BSP_LED_Init+0x98>)
 800239c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80023a0:	f042 0202 	orr.w	r2, r2, #2
 80023a4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80023a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	9b00      	ldr	r3, [sp, #0]
    gpio_init_structure.Pin   = LED_PIN[Led];
 80023b4:	4b1d      	ldr	r3, [pc, #116]	@ (800242c <BSP_LED_Init+0x9c>)
 80023b6:	f833 6010 	ldrh.w	r6, [r3, r0, lsl #1]
 80023ba:	9603      	str	r6, [sp, #12]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80023bc:	2301      	movs	r3, #1
 80023be:	9304      	str	r3, [sp, #16]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80023c0:	2400      	movs	r4, #0
 80023c2:	9405      	str	r4, [sp, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c4:	2303      	movs	r3, #3
 80023c6:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80023c8:	4b19      	ldr	r3, [pc, #100]	@ (8002430 <BSP_LED_Init+0xa0>)
 80023ca:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 80023ce:	a903      	add	r1, sp, #12
 80023d0:	4628      	mov	r0, r5
 80023d2:	f7fe f9cd 	bl	8000770 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80023d6:	4622      	mov	r2, r4
 80023d8:	4631      	mov	r1, r6
 80023da:	4628      	mov	r0, r5
 80023dc:	f7fe fad2 	bl	8000984 <HAL_GPIO_WritePin>
  int32_t ret = BSP_ERROR_NONE;
 80023e0:	4620      	mov	r0, r4
}
 80023e2:	b008      	add	sp, #32
 80023e4:	bd70      	pop	{r4, r5, r6, pc}
    else if(Led == LED2)
 80023e6:	2801      	cmp	r0, #1
 80023e8:	d00d      	beq.n	8002406 <BSP_LED_Init+0x76>
      LED3_GPIO_CLK_ENABLE();
 80023ea:	4b0f      	ldr	r3, [pc, #60]	@ (8002428 <BSP_LED_Init+0x98>)
 80023ec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80023f0:	f042 0202 	orr.w	r2, r2, #2
 80023f4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80023f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	9302      	str	r3, [sp, #8]
 8002402:	9b02      	ldr	r3, [sp, #8]
 8002404:	e7d6      	b.n	80023b4 <BSP_LED_Init+0x24>
      LED2_GPIO_CLK_ENABLE();
 8002406:	4b08      	ldr	r3, [pc, #32]	@ (8002428 <BSP_LED_Init+0x98>)
 8002408:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800240c:	f042 0210 	orr.w	r2, r2, #16
 8002410:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002418:	f003 0310 	and.w	r3, r3, #16
 800241c:	9301      	str	r3, [sp, #4]
 800241e:	9b01      	ldr	r3, [sp, #4]
 8002420:	e7c8      	b.n	80023b4 <BSP_LED_Init+0x24>
    ret = BSP_ERROR_WRONG_PARAM;
 8002422:	f06f 0001 	mvn.w	r0, #1
}
 8002426:	4770      	bx	lr
 8002428:	58024400 	.word	0x58024400
 800242c:	08002a04 	.word	0x08002a04
 8002430:	08002a0c 	.word	0x08002a0c

08002434 <BSP_PB_Init>:
{
 8002434:	b510      	push	{r4, lr}
 8002436:	b086      	sub	sp, #24
  BUTTON_USER_GPIO_CLK_ENABLE();
 8002438:	4b1c      	ldr	r3, [pc, #112]	@ (80024ac <BSP_PB_Init+0x78>)
 800243a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800243e:	f042 0204 	orr.w	r2, r2, #4
 8002442:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8002446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800244a:	f003 0304 	and.w	r3, r3, #4
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8002452:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002456:	9301      	str	r3, [sp, #4]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002458:	2302      	movs	r3, #2
 800245a:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800245c:	9304      	str	r3, [sp, #16]
  if(ButtonMode == BUTTON_MODE_GPIO)
 800245e:	b941      	cbnz	r1, 8002472 <BSP_PB_Init+0x3e>
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002460:	2300      	movs	r3, #0
 8002462:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8002464:	a901      	add	r1, sp, #4
 8002466:	4812      	ldr	r0, [pc, #72]	@ (80024b0 <BSP_PB_Init+0x7c>)
 8002468:	f7fe f982 	bl	8000770 <HAL_GPIO_Init>
}
 800246c:	2000      	movs	r0, #0
 800246e:	b006      	add	sp, #24
 8002470:	bd10      	pop	{r4, pc}
 8002472:	4604      	mov	r4, r0
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002474:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002478:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800247a:	a901      	add	r1, sp, #4
 800247c:	480c      	ldr	r0, [pc, #48]	@ (80024b0 <BSP_PB_Init+0x7c>)
 800247e:	f7fe f977 	bl	8000770 <HAL_GPIO_Init>
    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8002482:	4b0c      	ldr	r3, [pc, #48]	@ (80024b4 <BSP_PB_Init+0x80>)
 8002484:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8002488:	490b      	ldr	r1, [pc, #44]	@ (80024b8 <BSP_PB_Init+0x84>)
 800248a:	4620      	mov	r0, r4
 800248c:	f7fe f955 	bl	800073a <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8002490:	4a0a      	ldr	r2, [pc, #40]	@ (80024bc <BSP_PB_Init+0x88>)
 8002492:	2100      	movs	r1, #0
 8002494:	4620      	mov	r0, r4
 8002496:	f7fe f947 	bl	8000728 <HAL_EXTI_RegisterCallback>
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800249a:	2200      	movs	r2, #0
 800249c:	210f      	movs	r1, #15
 800249e:	2028      	movs	r0, #40	@ 0x28
 80024a0:	f7fe f8d0 	bl	8000644 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80024a4:	2028      	movs	r0, #40	@ 0x28
 80024a6:	f7fe f8dd 	bl	8000664 <HAL_NVIC_EnableIRQ>
 80024aa:	e7df      	b.n	800246c <BSP_PB_Init+0x38>
 80024ac:	58024400 	.word	0x58024400
 80024b0:	58020800 	.word	0x58020800
 80024b4:	200000d8 	.word	0x200000d8
 80024b8:	1630000d 	.word	0x1630000d
 80024bc:	080024d7 	.word	0x080024d7

080024c0 <BSP_PB_IRQHandler>:
{
 80024c0:	b508      	push	{r3, lr}
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80024c2:	4b03      	ldr	r3, [pc, #12]	@ (80024d0 <BSP_PB_IRQHandler+0x10>)
 80024c4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80024c8:	f7fe f93e 	bl	8000748 <HAL_EXTI_IRQHandler>
}
 80024cc:	bd08      	pop	{r3, pc}
 80024ce:	bf00      	nop
 80024d0:	200000d8 	.word	0x200000d8

080024d4 <BSP_PB_Callback>:
}
 80024d4:	4770      	bx	lr

080024d6 <BUTTON_USER_EXTI_Callback>:
{
 80024d6:	b508      	push	{r3, lr}
  BSP_PB_Callback(BUTTON_USER);
 80024d8:	2000      	movs	r0, #0
 80024da:	f7ff fffb 	bl	80024d4 <BSP_PB_Callback>
}
 80024de:	bd08      	pop	{r3, pc}

080024e0 <MX_USART3_Init>:
{
 80024e0:	b508      	push	{r3, lr}
 huart->Instance          = COM_USART[COM1];
 80024e2:	4a0a      	ldr	r2, [pc, #40]	@ (800250c <MX_USART3_Init+0x2c>)
 80024e4:	6812      	ldr	r2, [r2, #0]
 80024e6:	6002      	str	r2, [r0, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80024e8:	680a      	ldr	r2, [r1, #0]
 80024ea:	6042      	str	r2, [r0, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80024ec:	220c      	movs	r2, #12
 80024ee:	6142      	str	r2, [r0, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80024f0:	894a      	ldrh	r2, [r1, #10]
 80024f2:	6102      	str	r2, [r0, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 80024f4:	684a      	ldr	r2, [r1, #4]
 80024f6:	6082      	str	r2, [r0, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 80024f8:	890a      	ldrh	r2, [r1, #8]
 80024fa:	60c2      	str	r2, [r0, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80024fc:	898a      	ldrh	r2, [r1, #12]
 80024fe:	6182      	str	r2, [r0, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8002500:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002504:	61c2      	str	r2, [r0, #28]
 return HAL_UART_Init(huart);
 8002506:	f7ff feb8 	bl	800227a <HAL_UART_Init>
}
 800250a:	bd08      	pop	{r3, pc}
 800250c:	20000008 	.word	0x20000008

08002510 <BSP_COM_Init>:
  if(COM >= COMn)
 8002510:	b970      	cbnz	r0, 8002530 <BSP_COM_Init+0x20>
{
 8002512:	b538      	push	{r3, r4, r5, lr}
 8002514:	460d      	mov	r5, r1
    COM1_MspInit(&hcom_uart[COM]);
 8002516:	2294      	movs	r2, #148	@ 0x94
 8002518:	4c08      	ldr	r4, [pc, #32]	@ (800253c <BSP_COM_Init+0x2c>)
 800251a:	fb02 4400 	mla	r4, r2, r0, r4
 800251e:	4620      	mov	r0, r4
 8002520:	f7ff fef0 	bl	8002304 <COM1_MspInit>
    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8002524:	4629      	mov	r1, r5
 8002526:	4620      	mov	r0, r4
 8002528:	f7ff ffda 	bl	80024e0 <MX_USART3_Init>
 800252c:	b918      	cbnz	r0, 8002536 <BSP_COM_Init+0x26>
}
 800252e:	bd38      	pop	{r3, r4, r5, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8002530:	f06f 0001 	mvn.w	r0, #1
}
 8002534:	4770      	bx	lr
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002536:	f06f 0003 	mvn.w	r0, #3
  return ret;
 800253a:	e7f8      	b.n	800252e <BSP_COM_Init+0x1e>
 800253c:	20000044 	.word	0x20000044

08002540 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002540:	4a2b      	ldr	r2, [pc, #172]	@ (80025f0 <SystemInit+0xb0>)
 8002542:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002546:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800254a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800254e:	4b29      	ldr	r3, [pc, #164]	@ (80025f4 <SystemInit+0xb4>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	2b06      	cmp	r3, #6
 8002558:	d806      	bhi.n	8002568 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800255a:	4a26      	ldr	r2, [pc, #152]	@ (80025f4 <SystemInit+0xb4>)
 800255c:	6813      	ldr	r3, [r2, #0]
 800255e:	f023 030f 	bic.w	r3, r3, #15
 8002562:	f043 0307 	orr.w	r3, r3, #7
 8002566:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002568:	4b23      	ldr	r3, [pc, #140]	@ (80025f8 <SystemInit+0xb8>)
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	f042 0201 	orr.w	r2, r2, #1
 8002570:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002572:	2200      	movs	r2, #0
 8002574:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002576:	6819      	ldr	r1, [r3, #0]
 8002578:	4a20      	ldr	r2, [pc, #128]	@ (80025fc <SystemInit+0xbc>)
 800257a:	400a      	ands	r2, r1
 800257c:	601a      	str	r2, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800257e:	4b1d      	ldr	r3, [pc, #116]	@ (80025f4 <SystemInit+0xb4>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f013 0f08 	tst.w	r3, #8
 8002586:	d006      	beq.n	8002596 <SystemInit+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002588:	4a1a      	ldr	r2, [pc, #104]	@ (80025f4 <SystemInit+0xb4>)
 800258a:	6813      	ldr	r3, [r2, #0]
 800258c:	f023 030f 	bic.w	r3, r3, #15
 8002590:	f043 0307 	orr.w	r3, r3, #7
 8002594:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002596:	4b18      	ldr	r3, [pc, #96]	@ (80025f8 <SystemInit+0xb8>)
 8002598:	2200      	movs	r2, #0
 800259a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800259c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800259e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80025a0:	4917      	ldr	r1, [pc, #92]	@ (8002600 <SystemInit+0xc0>)
 80025a2:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80025a4:	4917      	ldr	r1, [pc, #92]	@ (8002604 <SystemInit+0xc4>)
 80025a6:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80025a8:	4917      	ldr	r1, [pc, #92]	@ (8002608 <SystemInit+0xc8>)
 80025aa:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80025ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80025ae:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80025b0:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80025b2:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80025b4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80025b6:	6819      	ldr	r1, [r3, #0]
 80025b8:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 80025bc:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80025be:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80025c0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80025c4:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 80025c8:	d110      	bne.n	80025ec <SystemInit+0xac>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80025ca:	4b0b      	ldr	r3, [pc, #44]	@ (80025f8 <SystemInit+0xb8>)
 80025cc:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80025d0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80025d4:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80025d8:	4a0c      	ldr	r2, [pc, #48]	@ (800260c <SystemInit+0xcc>)
 80025da:	f243 01d2 	movw	r1, #12498	@ 0x30d2
 80025de:	6011      	str	r1, [r2, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80025e0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80025e4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80025e8:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	e000ed00 	.word	0xe000ed00
 80025f4:	52002000 	.word	0x52002000
 80025f8:	58024400 	.word	0x58024400
 80025fc:	eaf6ed7f 	.word	0xeaf6ed7f
 8002600:	02020200 	.word	0x02020200
 8002604:	01ff0000 	.word	0x01ff0000
 8002608:	01010280 	.word	0x01010280
 800260c:	52004000 	.word	0x52004000

08002610 <ExitRun0Mode>:
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8002610:	4a05      	ldr	r2, [pc, #20]	@ (8002628 <ExitRun0Mode+0x18>)
 8002612:	68d3      	ldr	r3, [r2, #12]
 8002614:	f043 0302 	orr.w	r3, r3, #2
 8002618:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800261a:	4b03      	ldr	r3, [pc, #12]	@ (8002628 <ExitRun0Mode+0x18>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8002622:	d0fa      	beq.n	800261a <ExitRun0Mode+0xa>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	58024800 	.word	0x58024800

0800262c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800262c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002668 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002630:	f7ff ffee 	bl	8002610 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002634:	f7ff ff84 	bl	8002540 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002638:	480c      	ldr	r0, [pc, #48]	@ (800266c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800263a:	490d      	ldr	r1, [pc, #52]	@ (8002670 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800263c:	4a0d      	ldr	r2, [pc, #52]	@ (8002674 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800263e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002640:	e002      	b.n	8002648 <LoopCopyDataInit>

08002642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002646:	3304      	adds	r3, #4

08002648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800264a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800264c:	d3f9      	bcc.n	8002642 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800264e:	4a0a      	ldr	r2, [pc, #40]	@ (8002678 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002650:	4c0a      	ldr	r4, [pc, #40]	@ (800267c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002654:	e001      	b.n	800265a <LoopFillZerobss>

08002656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002658:	3204      	adds	r2, #4

0800265a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800265a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800265c:	d3fb      	bcc.n	8002656 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800265e:	f000 f819 	bl	8002694 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002662:	f7fd ff0d 	bl	8000480 <main>
  bx  lr
 8002666:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002668:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800266c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002670:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8002674:	08002a38 	.word	0x08002a38
  ldr r2, =_sbss
 8002678:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800267c:	200000e0 	.word	0x200000e0

08002680 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002680:	e7fe      	b.n	8002680 <ADC3_IRQHandler>

08002682 <memset>:
 8002682:	4402      	add	r2, r0
 8002684:	4603      	mov	r3, r0
 8002686:	4293      	cmp	r3, r2
 8002688:	d100      	bne.n	800268c <memset+0xa>
 800268a:	4770      	bx	lr
 800268c:	f803 1b01 	strb.w	r1, [r3], #1
 8002690:	e7f9      	b.n	8002686 <memset+0x4>
	...

08002694 <__libc_init_array>:
 8002694:	b570      	push	{r4, r5, r6, lr}
 8002696:	4b0d      	ldr	r3, [pc, #52]	@ (80026cc <__libc_init_array+0x38>)
 8002698:	4d0d      	ldr	r5, [pc, #52]	@ (80026d0 <__libc_init_array+0x3c>)
 800269a:	1b5b      	subs	r3, r3, r5
 800269c:	109c      	asrs	r4, r3, #2
 800269e:	2600      	movs	r6, #0
 80026a0:	42a6      	cmp	r6, r4
 80026a2:	d109      	bne.n	80026b8 <__libc_init_array+0x24>
 80026a4:	f000 f996 	bl	80029d4 <_init>
 80026a8:	4d0a      	ldr	r5, [pc, #40]	@ (80026d4 <__libc_init_array+0x40>)
 80026aa:	4b0b      	ldr	r3, [pc, #44]	@ (80026d8 <__libc_init_array+0x44>)
 80026ac:	1b5b      	subs	r3, r3, r5
 80026ae:	109c      	asrs	r4, r3, #2
 80026b0:	2600      	movs	r6, #0
 80026b2:	42a6      	cmp	r6, r4
 80026b4:	d105      	bne.n	80026c2 <__libc_init_array+0x2e>
 80026b6:	bd70      	pop	{r4, r5, r6, pc}
 80026b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80026bc:	4798      	blx	r3
 80026be:	3601      	adds	r6, #1
 80026c0:	e7ee      	b.n	80026a0 <__libc_init_array+0xc>
 80026c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80026c6:	4798      	blx	r3
 80026c8:	3601      	adds	r6, #1
 80026ca:	e7f2      	b.n	80026b2 <__libc_init_array+0x1e>
 80026cc:	08002a30 	.word	0x08002a30
 80026d0:	08002a30 	.word	0x08002a30
 80026d4:	08002a30 	.word	0x08002a30
 80026d8:	08002a34 	.word	0x08002a34

080026dc <__udivmoddi4>:
 80026dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026e0:	9d08      	ldr	r5, [sp, #32]
 80026e2:	460f      	mov	r7, r1
 80026e4:	4604      	mov	r4, r0
 80026e6:	468c      	mov	ip, r1
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d148      	bne.n	800277e <__udivmoddi4+0xa2>
 80026ec:	428a      	cmp	r2, r1
 80026ee:	4616      	mov	r6, r2
 80026f0:	d961      	bls.n	80027b6 <__udivmoddi4+0xda>
 80026f2:	fab2 f382 	clz	r3, r2
 80026f6:	b14b      	cbz	r3, 800270c <__udivmoddi4+0x30>
 80026f8:	f1c3 0220 	rsb	r2, r3, #32
 80026fc:	fa01 fc03 	lsl.w	ip, r1, r3
 8002700:	fa20 f202 	lsr.w	r2, r0, r2
 8002704:	409e      	lsls	r6, r3
 8002706:	ea42 0c0c 	orr.w	ip, r2, ip
 800270a:	409c      	lsls	r4, r3
 800270c:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8002710:	b2b7      	uxth	r7, r6
 8002712:	fbbc f1fe 	udiv	r1, ip, lr
 8002716:	0c22      	lsrs	r2, r4, #16
 8002718:	fb0e cc11 	mls	ip, lr, r1, ip
 800271c:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8002720:	fb01 f007 	mul.w	r0, r1, r7
 8002724:	4290      	cmp	r0, r2
 8002726:	d909      	bls.n	800273c <__udivmoddi4+0x60>
 8002728:	18b2      	adds	r2, r6, r2
 800272a:	f101 3cff 	add.w	ip, r1, #4294967295	@ 0xffffffff
 800272e:	f080 80ee 	bcs.w	800290e <__udivmoddi4+0x232>
 8002732:	4290      	cmp	r0, r2
 8002734:	f240 80eb 	bls.w	800290e <__udivmoddi4+0x232>
 8002738:	3902      	subs	r1, #2
 800273a:	4432      	add	r2, r6
 800273c:	1a12      	subs	r2, r2, r0
 800273e:	b2a4      	uxth	r4, r4
 8002740:	fbb2 f0fe 	udiv	r0, r2, lr
 8002744:	fb0e 2210 	mls	r2, lr, r0, r2
 8002748:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800274c:	fb00 f707 	mul.w	r7, r0, r7
 8002750:	42a7      	cmp	r7, r4
 8002752:	d909      	bls.n	8002768 <__udivmoddi4+0x8c>
 8002754:	1934      	adds	r4, r6, r4
 8002756:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 800275a:	f080 80da 	bcs.w	8002912 <__udivmoddi4+0x236>
 800275e:	42a7      	cmp	r7, r4
 8002760:	f240 80d7 	bls.w	8002912 <__udivmoddi4+0x236>
 8002764:	4434      	add	r4, r6
 8002766:	3802      	subs	r0, #2
 8002768:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800276c:	1be4      	subs	r4, r4, r7
 800276e:	2100      	movs	r1, #0
 8002770:	b11d      	cbz	r5, 800277a <__udivmoddi4+0x9e>
 8002772:	40dc      	lsrs	r4, r3
 8002774:	2300      	movs	r3, #0
 8002776:	e9c5 4300 	strd	r4, r3, [r5]
 800277a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800277e:	428b      	cmp	r3, r1
 8002780:	d906      	bls.n	8002790 <__udivmoddi4+0xb4>
 8002782:	b10d      	cbz	r5, 8002788 <__udivmoddi4+0xac>
 8002784:	e9c5 0100 	strd	r0, r1, [r5]
 8002788:	2100      	movs	r1, #0
 800278a:	4608      	mov	r0, r1
 800278c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002790:	fab3 f183 	clz	r1, r3
 8002794:	2900      	cmp	r1, #0
 8002796:	d148      	bne.n	800282a <__udivmoddi4+0x14e>
 8002798:	42bb      	cmp	r3, r7
 800279a:	d302      	bcc.n	80027a2 <__udivmoddi4+0xc6>
 800279c:	4282      	cmp	r2, r0
 800279e:	f200 8107 	bhi.w	80029b0 <__udivmoddi4+0x2d4>
 80027a2:	1a84      	subs	r4, r0, r2
 80027a4:	eb67 0203 	sbc.w	r2, r7, r3
 80027a8:	2001      	movs	r0, #1
 80027aa:	4694      	mov	ip, r2
 80027ac:	2d00      	cmp	r5, #0
 80027ae:	d0e4      	beq.n	800277a <__udivmoddi4+0x9e>
 80027b0:	e9c5 4c00 	strd	r4, ip, [r5]
 80027b4:	e7e1      	b.n	800277a <__udivmoddi4+0x9e>
 80027b6:	2a00      	cmp	r2, #0
 80027b8:	f000 8092 	beq.w	80028e0 <__udivmoddi4+0x204>
 80027bc:	fab2 f382 	clz	r3, r2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f040 80a8 	bne.w	8002916 <__udivmoddi4+0x23a>
 80027c6:	1a8a      	subs	r2, r1, r2
 80027c8:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 80027cc:	fa1f fc86 	uxth.w	ip, r6
 80027d0:	2101      	movs	r1, #1
 80027d2:	0c20      	lsrs	r0, r4, #16
 80027d4:	fbb2 f7fe 	udiv	r7, r2, lr
 80027d8:	fb0e 2217 	mls	r2, lr, r7, r2
 80027dc:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 80027e0:	fb0c f007 	mul.w	r0, ip, r7
 80027e4:	4290      	cmp	r0, r2
 80027e6:	d907      	bls.n	80027f8 <__udivmoddi4+0x11c>
 80027e8:	18b2      	adds	r2, r6, r2
 80027ea:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80027ee:	d202      	bcs.n	80027f6 <__udivmoddi4+0x11a>
 80027f0:	4290      	cmp	r0, r2
 80027f2:	f200 80e2 	bhi.w	80029ba <__udivmoddi4+0x2de>
 80027f6:	4647      	mov	r7, r8
 80027f8:	1a12      	subs	r2, r2, r0
 80027fa:	b2a4      	uxth	r4, r4
 80027fc:	fbb2 f0fe 	udiv	r0, r2, lr
 8002800:	fb0e 2210 	mls	r2, lr, r0, r2
 8002804:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8002808:	fb0c fc00 	mul.w	ip, ip, r0
 800280c:	45a4      	cmp	ip, r4
 800280e:	d907      	bls.n	8002820 <__udivmoddi4+0x144>
 8002810:	1934      	adds	r4, r6, r4
 8002812:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8002816:	d202      	bcs.n	800281e <__udivmoddi4+0x142>
 8002818:	45a4      	cmp	ip, r4
 800281a:	f200 80cb 	bhi.w	80029b4 <__udivmoddi4+0x2d8>
 800281e:	4610      	mov	r0, r2
 8002820:	eba4 040c 	sub.w	r4, r4, ip
 8002824:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8002828:	e7a2      	b.n	8002770 <__udivmoddi4+0x94>
 800282a:	f1c1 0620 	rsb	r6, r1, #32
 800282e:	408b      	lsls	r3, r1
 8002830:	fa22 fc06 	lsr.w	ip, r2, r6
 8002834:	ea4c 0c03 	orr.w	ip, ip, r3
 8002838:	fa07 f401 	lsl.w	r4, r7, r1
 800283c:	fa20 f306 	lsr.w	r3, r0, r6
 8002840:	40f7      	lsrs	r7, r6
 8002842:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8002846:	4323      	orrs	r3, r4
 8002848:	fa00 f801 	lsl.w	r8, r0, r1
 800284c:	fa1f fe8c 	uxth.w	lr, ip
 8002850:	fbb7 f0f9 	udiv	r0, r7, r9
 8002854:	0c1c      	lsrs	r4, r3, #16
 8002856:	fb09 7710 	mls	r7, r9, r0, r7
 800285a:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 800285e:	fb00 f70e 	mul.w	r7, r0, lr
 8002862:	42a7      	cmp	r7, r4
 8002864:	fa02 f201 	lsl.w	r2, r2, r1
 8002868:	d90a      	bls.n	8002880 <__udivmoddi4+0x1a4>
 800286a:	eb1c 0404 	adds.w	r4, ip, r4
 800286e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8002872:	f080 809b 	bcs.w	80029ac <__udivmoddi4+0x2d0>
 8002876:	42a7      	cmp	r7, r4
 8002878:	f240 8098 	bls.w	80029ac <__udivmoddi4+0x2d0>
 800287c:	3802      	subs	r0, #2
 800287e:	4464      	add	r4, ip
 8002880:	1be4      	subs	r4, r4, r7
 8002882:	b29f      	uxth	r7, r3
 8002884:	fbb4 f3f9 	udiv	r3, r4, r9
 8002888:	fb09 4413 	mls	r4, r9, r3, r4
 800288c:	ea47 4404 	orr.w	r4, r7, r4, lsl #16
 8002890:	fb03 fe0e 	mul.w	lr, r3, lr
 8002894:	45a6      	cmp	lr, r4
 8002896:	d909      	bls.n	80028ac <__udivmoddi4+0x1d0>
 8002898:	eb1c 0404 	adds.w	r4, ip, r4
 800289c:	f103 37ff 	add.w	r7, r3, #4294967295	@ 0xffffffff
 80028a0:	f080 8082 	bcs.w	80029a8 <__udivmoddi4+0x2cc>
 80028a4:	45a6      	cmp	lr, r4
 80028a6:	d97f      	bls.n	80029a8 <__udivmoddi4+0x2cc>
 80028a8:	3b02      	subs	r3, #2
 80028aa:	4464      	add	r4, ip
 80028ac:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80028b0:	eba4 040e 	sub.w	r4, r4, lr
 80028b4:	fba0 e702 	umull	lr, r7, r0, r2
 80028b8:	42bc      	cmp	r4, r7
 80028ba:	4673      	mov	r3, lr
 80028bc:	46b9      	mov	r9, r7
 80028be:	d363      	bcc.n	8002988 <__udivmoddi4+0x2ac>
 80028c0:	d060      	beq.n	8002984 <__udivmoddi4+0x2a8>
 80028c2:	b15d      	cbz	r5, 80028dc <__udivmoddi4+0x200>
 80028c4:	ebb8 0203 	subs.w	r2, r8, r3
 80028c8:	eb64 0409 	sbc.w	r4, r4, r9
 80028cc:	fa04 f606 	lsl.w	r6, r4, r6
 80028d0:	fa22 f301 	lsr.w	r3, r2, r1
 80028d4:	431e      	orrs	r6, r3
 80028d6:	40cc      	lsrs	r4, r1
 80028d8:	e9c5 6400 	strd	r6, r4, [r5]
 80028dc:	2100      	movs	r1, #0
 80028de:	e74c      	b.n	800277a <__udivmoddi4+0x9e>
 80028e0:	0862      	lsrs	r2, r4, #1
 80028e2:	0848      	lsrs	r0, r1, #1
 80028e4:	ea42 71c1 	orr.w	r1, r2, r1, lsl #31
 80028e8:	0c0b      	lsrs	r3, r1, #16
 80028ea:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80028ee:	b28a      	uxth	r2, r1
 80028f0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80028f4:	fbb3 f1f6 	udiv	r1, r3, r6
 80028f8:	07e4      	lsls	r4, r4, #31
 80028fa:	46b4      	mov	ip, r6
 80028fc:	4637      	mov	r7, r6
 80028fe:	46b6      	mov	lr, r6
 8002900:	231f      	movs	r3, #31
 8002902:	fbb0 f0f6 	udiv	r0, r0, r6
 8002906:	1bd2      	subs	r2, r2, r7
 8002908:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800290c:	e761      	b.n	80027d2 <__udivmoddi4+0xf6>
 800290e:	4661      	mov	r1, ip
 8002910:	e714      	b.n	800273c <__udivmoddi4+0x60>
 8002912:	4610      	mov	r0, r2
 8002914:	e728      	b.n	8002768 <__udivmoddi4+0x8c>
 8002916:	f1c3 0120 	rsb	r1, r3, #32
 800291a:	fa20 f201 	lsr.w	r2, r0, r1
 800291e:	409e      	lsls	r6, r3
 8002920:	fa27 f101 	lsr.w	r1, r7, r1
 8002924:	409f      	lsls	r7, r3
 8002926:	433a      	orrs	r2, r7
 8002928:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 800292c:	fa1f fc86 	uxth.w	ip, r6
 8002930:	fbb1 f7fe 	udiv	r7, r1, lr
 8002934:	fb0e 1017 	mls	r0, lr, r7, r1
 8002938:	0c11      	lsrs	r1, r2, #16
 800293a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800293e:	fb07 f80c 	mul.w	r8, r7, ip
 8002942:	4588      	cmp	r8, r1
 8002944:	fa04 f403 	lsl.w	r4, r4, r3
 8002948:	d93a      	bls.n	80029c0 <__udivmoddi4+0x2e4>
 800294a:	1871      	adds	r1, r6, r1
 800294c:	f107 30ff 	add.w	r0, r7, #4294967295	@ 0xffffffff
 8002950:	d201      	bcs.n	8002956 <__udivmoddi4+0x27a>
 8002952:	4588      	cmp	r8, r1
 8002954:	d81f      	bhi.n	8002996 <__udivmoddi4+0x2ba>
 8002956:	eba1 0108 	sub.w	r1, r1, r8
 800295a:	fbb1 f8fe 	udiv	r8, r1, lr
 800295e:	fb08 f70c 	mul.w	r7, r8, ip
 8002962:	fb0e 1118 	mls	r1, lr, r8, r1
 8002966:	b292      	uxth	r2, r2
 8002968:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800296c:	42ba      	cmp	r2, r7
 800296e:	d22f      	bcs.n	80029d0 <__udivmoddi4+0x2f4>
 8002970:	18b2      	adds	r2, r6, r2
 8002972:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8002976:	d2c6      	bcs.n	8002906 <__udivmoddi4+0x22a>
 8002978:	42ba      	cmp	r2, r7
 800297a:	d2c4      	bcs.n	8002906 <__udivmoddi4+0x22a>
 800297c:	f1a8 0102 	sub.w	r1, r8, #2
 8002980:	4432      	add	r2, r6
 8002982:	e7c0      	b.n	8002906 <__udivmoddi4+0x22a>
 8002984:	45f0      	cmp	r8, lr
 8002986:	d29c      	bcs.n	80028c2 <__udivmoddi4+0x1e6>
 8002988:	ebbe 0302 	subs.w	r3, lr, r2
 800298c:	eb67 070c 	sbc.w	r7, r7, ip
 8002990:	3801      	subs	r0, #1
 8002992:	46b9      	mov	r9, r7
 8002994:	e795      	b.n	80028c2 <__udivmoddi4+0x1e6>
 8002996:	eba6 0808 	sub.w	r8, r6, r8
 800299a:	4441      	add	r1, r8
 800299c:	1eb8      	subs	r0, r7, #2
 800299e:	fbb1 f8fe 	udiv	r8, r1, lr
 80029a2:	fb08 f70c 	mul.w	r7, r8, ip
 80029a6:	e7dc      	b.n	8002962 <__udivmoddi4+0x286>
 80029a8:	463b      	mov	r3, r7
 80029aa:	e77f      	b.n	80028ac <__udivmoddi4+0x1d0>
 80029ac:	4650      	mov	r0, sl
 80029ae:	e767      	b.n	8002880 <__udivmoddi4+0x1a4>
 80029b0:	4608      	mov	r0, r1
 80029b2:	e6fb      	b.n	80027ac <__udivmoddi4+0xd0>
 80029b4:	4434      	add	r4, r6
 80029b6:	3802      	subs	r0, #2
 80029b8:	e732      	b.n	8002820 <__udivmoddi4+0x144>
 80029ba:	3f02      	subs	r7, #2
 80029bc:	4432      	add	r2, r6
 80029be:	e71b      	b.n	80027f8 <__udivmoddi4+0x11c>
 80029c0:	eba1 0108 	sub.w	r1, r1, r8
 80029c4:	4638      	mov	r0, r7
 80029c6:	fbb1 f8fe 	udiv	r8, r1, lr
 80029ca:	fb08 f70c 	mul.w	r7, r8, ip
 80029ce:	e7c8      	b.n	8002962 <__udivmoddi4+0x286>
 80029d0:	4641      	mov	r1, r8
 80029d2:	e798      	b.n	8002906 <__udivmoddi4+0x22a>

080029d4 <_init>:
 80029d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029d6:	bf00      	nop
 80029d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029da:	bc08      	pop	{r3}
 80029dc:	469e      	mov	lr, r3
 80029de:	4770      	bx	lr

080029e0 <_fini>:
 80029e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029e2:	bf00      	nop
 80029e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029e6:	bc08      	pop	{r3}
 80029e8:	469e      	mov	lr, r3
 80029ea:	4770      	bx	lr
